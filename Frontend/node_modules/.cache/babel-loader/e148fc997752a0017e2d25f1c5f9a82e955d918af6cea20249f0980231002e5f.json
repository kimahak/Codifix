{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noufel\\\\Documents\\\\Nueva carpeta\\\\frontend\\\\src\\\\Editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport { EditorView, basicSetup } from \"codemirror\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER = \"http://localhost:5000\";\nexport default function Editor() {\n  _s();\n  const {\n    id: documentId\n  } = useParams();\n  const socketRef = useRef();\n  const editorRef = useRef();\n  useEffect(() => {\n    socketRef.current = io(SOCKET_SERVER);\n\n    // request document from server\n    socketRef.current.emit(\"get-document\", documentId);\n\n    // when server sends existing document\n    socketRef.current.once(\"load-document\", document => {\n      editorRef.current.dispatch({\n        changes: {\n          from: 0,\n          to: editorRef.current.state.doc.length,\n          insert: document || \"\"\n        }\n      });\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [documentId]);\n  useEffect(() => {\n    if (!editorRef.current) {\n      editorRef.current = new EditorView({\n        doc: \"\",\n        extensions: [basicSetup, javascript()],\n        parent: document.getElementById(\"editor\")\n      });\n    }\n    const updateListener = EditorView.updateListener.of(update => {\n      if (update.changes) {\n        const text = update.state.doc.toString();\n        socketRef.current.emit(\"send-changes\", text);\n      }\n    });\n    editorRef.current.dispatch({\n      effects: editorRef.current.state.facet(EditorView.updateListener).concat(updateListener)\n    });\n  }, []);\n\n  // apply changes received from other clients\n  useEffect(() => {\n    if (!socketRef.current || !editorRef.current) return;\n    socketRef.current.on(\"receive-changes\", newText => {\n      editorRef.current.dispatch({\n        changes: {\n          from: 0,\n          to: editorRef.current.state.doc.length,\n          insert: newText\n        }\n      });\n    });\n    return () => {\n      socketRef.current.off(\"receive-changes\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editor\",\n    style: {\n      height: \"90vh\",\n      border: \"1px solid #ccc\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n}\n_s(Editor, \"G+ImUkqKAZnGwvjGvkgHaflBGrY=\", false, function () {\n  return [useParams];\n});\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","useParams","io","EditorView","basicSetup","javascript","jsxDEV","_jsxDEV","SOCKET_SERVER","Editor","_s","id","documentId","socketRef","editorRef","current","emit","once","document","dispatch","changes","from","to","state","doc","length","insert","disconnect","extensions","parent","getElementById","updateListener","of","update","text","toString","effects","facet","concat","on","newText","off","style","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Noufel/Documents/Nueva carpeta/frontend/src/Editor.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport { EditorView, basicSetup } from \"codemirror\";\r\nimport { javascript } from \"@codemirror/lang-javascript\";\r\n\r\nconst SOCKET_SERVER = \"http://localhost:5000\";\r\n\r\nexport default function Editor() {\r\n  const { id: documentId } = useParams();\r\n  const socketRef = useRef();\r\n  const editorRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io(SOCKET_SERVER);\r\n\r\n    // request document from server\r\n    socketRef.current.emit(\"get-document\", documentId);\r\n\r\n    // when server sends existing document\r\n    socketRef.current.once(\"load-document\", (document) => {\r\n      editorRef.current.dispatch({\r\n        changes: { from: 0, to: editorRef.current.state.doc.length, insert: document || \"\" }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [documentId]);\r\n\r\n  useEffect(() => {\r\n    if (!editorRef.current) {\r\n      editorRef.current = new EditorView({\r\n        doc: \"\",\r\n        extensions: [basicSetup, javascript()],\r\n        parent: document.getElementById(\"editor\"),\r\n      });\r\n    }\r\n\r\n    const updateListener = EditorView.updateListener.of((update) => {\r\n      if (update.changes) {\r\n        const text = update.state.doc.toString();\r\n        socketRef.current.emit(\"send-changes\", text);\r\n      }\r\n    });\r\n\r\n    editorRef.current.dispatch({\r\n      effects: editorRef.current.state.facet(EditorView.updateListener).concat(updateListener)\r\n    });\r\n\r\n  }, []);\r\n\r\n  // apply changes received from other clients\r\n  useEffect(() => {\r\n    if (!socketRef.current || !editorRef.current) return;\r\n\r\n    socketRef.current.on(\"receive-changes\", (newText) => {\r\n      editorRef.current.dispatch({\r\n        changes: { from: 0, to: editorRef.current.state.doc.length, insert: newText }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.off(\"receive-changes\");\r\n    };\r\n  }, []);\r\n\r\n  return <div id=\"editor\" style={{ height: \"90vh\", border: \"1px solid #ccc\" }}></div>;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}