{"ast":null,"code":"import { NodeProp, IterMode, Tree, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, EditorView, Decoration, WidgetType, gutter, GutterMarker, Direction } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n  return Facet.define({\n    combine: baseData ? values => values.concat(baseData) : undefined\n  });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/\nconst sublanguageProp = /*@__PURE__*/new NodeProp();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\nclass Language {\n  /**\n  Construct a language object. If you need to invoke this\n  directly, first define a data facet with\n  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n  to the language's outer syntax node.\n  */\n  constructor(\n  /**\n  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n  used for this language.\n  */\n  data, parser, extraExtensions = [],\n  /**\n  A language name.\n  */\n  name = \"\") {\n    this.data = data;\n    this.name = name;\n    // Kludge to define EditorState.tree as a debugging helper,\n    // without the EditorState package actually knowing about\n    // languages and lezer trees.\n    if (!EditorState.prototype.hasOwnProperty(\"tree\")) Object.defineProperty(EditorState.prototype, \"tree\", {\n      get() {\n        return syntaxTree(this);\n      }\n    });\n    this.parser = parser;\n    this.extension = [language.of(this), EditorState.languageData.of((state, pos, side) => {\n      let top = topNodeAt(state, pos, side),\n        data = top.type.prop(languageDataProp);\n      if (!data) return [];\n      let base = state.facet(data),\n        sub = top.type.prop(sublanguageProp);\n      if (sub) {\n        let innerNode = top.resolve(pos - top.from, side);\n        for (let sublang of sub) if (sublang.test(innerNode, state)) {\n          let data = state.facet(sublang.facet);\n          return sublang.type == \"replace\" ? data : data.concat(base);\n        }\n      }\n      return base;\n    })].concat(extraExtensions);\n  }\n  /**\n  Query whether this language is active at the given position.\n  */\n  isActiveAt(state, pos, side = -1) {\n    return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n  }\n  /**\n  Find the document regions that were parsed using this language.\n  The returned regions will _include_ any nested languages rooted\n  in this language, when those exist.\n  */\n  findRegions(state) {\n    let lang = state.facet(language);\n    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{\n      from: 0,\n      to: state.doc.length\n    }];\n    if (!lang || !lang.allowsNesting) return [];\n    let result = [];\n    let explore = (tree, from) => {\n      if (tree.prop(languageDataProp) == this.data) {\n        result.push({\n          from,\n          to: from + tree.length\n        });\n        return;\n      }\n      let mount = tree.prop(NodeProp.mounted);\n      if (mount) {\n        if (mount.tree.prop(languageDataProp) == this.data) {\n          if (mount.overlay) for (let r of mount.overlay) result.push({\n            from: r.from + from,\n            to: r.to + from\n          });else result.push({\n            from: from,\n            to: from + tree.length\n          });\n          return;\n        } else if (mount.overlay) {\n          let size = result.length;\n          explore(mount.tree, mount.overlay[0].from + from);\n          if (result.length > size) return;\n        }\n      }\n      for (let i = 0; i < tree.children.length; i++) {\n        let ch = tree.children[i];\n        if (ch instanceof Tree) explore(ch, tree.positions[i] + from);\n      }\n    };\n    explore(syntaxTree(state), 0);\n    return result;\n  }\n  /**\n  Indicates whether this language allows nested languages. The\n  default implementation returns true.\n  */\n  get allowsNesting() {\n    return true;\n  }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction topNodeAt(state, pos, side) {\n  let topLang = state.facet(language),\n    tree = syntaxTree(state).topNode;\n  if (!topLang || topLang.allowsNesting) {\n    for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers)) if (node.type.isTop) tree = node;\n  }\n  return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n  constructor(data, parser, name) {\n    super(data, parser, [], name);\n    this.parser = parser;\n  }\n  /**\n  Define a language from a parser.\n  */\n  static define(spec) {\n    let data = defineLanguageFacet(spec.languageData);\n    return new LRLanguage(data, spec.parser.configure({\n      props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n    }), spec.name);\n  }\n  /**\n  Create a new instance of this language with a reconfigured\n  version of its parser and optionally a new name.\n  */\n  configure(options, name) {\n    return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\n  }\n  get allowsNesting() {\n    return this.parser.hasWrappers();\n  }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\nfunction syntaxTree(state) {\n  let field = state.field(Language.state, false);\n  return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n  var _a;\n  let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n  if (!parse) return null;\n  let oldVieport = parse.viewport;\n  parse.updateViewport({\n    from: 0,\n    to: upto\n  });\n  let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n  parse.updateViewport(oldVieport);\n  return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of thatâ€”the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n  var _a;\n  return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\n  let success = ensureSyntaxTree(view.state, upto, timeout);\n  if (success != syntaxTree(view.state)) view.dispatch({});\n  return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n  var _a;\n  return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/\nclass DocInput {\n  /**\n  Create an input object for the given document.\n  */\n  constructor(doc) {\n    this.doc = doc;\n    this.cursorPos = 0;\n    this.string = \"\";\n    this.cursor = doc.iter();\n  }\n  get length() {\n    return this.doc.length;\n  }\n  syncTo(pos) {\n    this.string = this.cursor.next(pos - this.cursorPos).value;\n    this.cursorPos = pos + this.string.length;\n    return this.cursorPos - this.string.length;\n  }\n  chunk(pos) {\n    this.syncTo(pos);\n    return this.string;\n  }\n  get lineChunks() {\n    return true;\n  }\n  read(from, to) {\n    let stringStart = this.cursorPos - this.string.length;\n    if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);\n  }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n  constructor(parser,\n  /**\n  The current editor state.\n  */\n  state,\n  /**\n  Tree fragments that can be reused by incremental re-parses.\n  */\n  fragments = [],\n  /**\n  @internal\n  */\n  tree,\n  /**\n  @internal\n  */\n  treeLen,\n  /**\n  The current editor viewport (or some overapproximation\n  thereof). Intended to be used for opportunistically avoiding\n  work (in which case\n  [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n  should be called to make sure the parser is restarted when the\n  skipped region becomes visible).\n  */\n  viewport,\n  /**\n  @internal\n  */\n  skipped,\n  /**\n  This is where skipping parsers can register a promise that,\n  when resolved, will schedule a new parse. It is cleared when\n  the parse worker picks up the promise. @internal\n  */\n  scheduleOn) {\n    this.parser = parser;\n    this.state = state;\n    this.fragments = fragments;\n    this.tree = tree;\n    this.treeLen = treeLen;\n    this.viewport = viewport;\n    this.skipped = skipped;\n    this.scheduleOn = scheduleOn;\n    this.parse = null;\n    /**\n    @internal\n    */\n    this.tempSkipped = [];\n  }\n  /**\n  @internal\n  */\n  static create(parser, state, viewport) {\n    return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n  }\n  startParse() {\n    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n  }\n  /**\n  @internal\n  */\n  work(until, upto) {\n    if (upto != null && upto >= this.state.doc.length) upto = undefined;\n    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n      this.takeTree();\n      return true;\n    }\n    return this.withContext(() => {\n      var _a;\n      if (typeof until == \"number\") {\n        let endTime = Date.now() + until;\n        until = () => Date.now() > endTime;\n      }\n      if (!this.parse) this.parse = this.startParse();\n      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length) this.parse.stopAt(upto);\n      for (;;) {\n        let done = this.parse.advance();\n        if (done) {\n          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n          this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n          this.tree = done;\n          this.parse = null;\n          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length)) this.parse = this.startParse();else return true;\n        }\n        if (until()) return false;\n      }\n    });\n  }\n  /**\n  @internal\n  */\n  takeTree() {\n    let pos, tree;\n    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);\n      this.withContext(() => {\n        while (!(tree = this.parse.advance())) {}\n      });\n      this.treeLen = pos;\n      this.tree = tree;\n      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n      this.parse = null;\n    }\n  }\n  withContext(f) {\n    let prev = currentContext;\n    currentContext = this;\n    try {\n      return f();\n    } finally {\n      currentContext = prev;\n    }\n  }\n  withoutTempSkipped(fragments) {\n    for (let r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);\n    return fragments;\n  }\n  /**\n  @internal\n  */\n  changes(changes, newState) {\n    let {\n      fragments,\n      tree,\n      treeLen,\n      viewport,\n      skipped\n    } = this;\n    this.takeTree();\n    if (!changes.empty) {\n      let ranges = [];\n      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({\n        fromA,\n        toA,\n        fromB,\n        toB\n      }));\n      fragments = TreeFragment.applyChanges(fragments, ranges);\n      tree = Tree.empty;\n      treeLen = 0;\n      viewport = {\n        from: changes.mapPos(viewport.from, -1),\n        to: changes.mapPos(viewport.to, 1)\n      };\n      if (this.skipped.length) {\n        skipped = [];\n        for (let r of this.skipped) {\n          let from = changes.mapPos(r.from, 1),\n            to = changes.mapPos(r.to, -1);\n          if (from < to) skipped.push({\n            from,\n            to\n          });\n        }\n      }\n    }\n    return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n  }\n  /**\n  @internal\n  */\n  updateViewport(viewport) {\n    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;\n    this.viewport = viewport;\n    let startLen = this.skipped.length;\n    for (let i = 0; i < this.skipped.length; i++) {\n      let {\n        from,\n        to\n      } = this.skipped[i];\n      if (from < viewport.to && to > viewport.from) {\n        this.fragments = cutFragments(this.fragments, from, to);\n        this.skipped.splice(i--, 1);\n      }\n    }\n    if (this.skipped.length >= startLen) return false;\n    this.reset();\n    return true;\n  }\n  /**\n  @internal\n  */\n  reset() {\n    if (this.parse) {\n      this.takeTree();\n      this.parse = null;\n    }\n  }\n  /**\n  Notify the parse scheduler that the given region was skipped\n  because it wasn't in view, and the parse should be restarted\n  when it comes into view.\n  */\n  skipUntilInView(from, to) {\n    this.skipped.push({\n      from,\n      to\n    });\n  }\n  /**\n  Returns a parser intended to be used as placeholder when\n  asynchronously loading a nested parser. It'll skip its input and\n  mark it as not-really-parsed, so that the next update will parse\n  it again.\n  \n  When `until` is given, a reparse will be scheduled when that\n  promise resolves.\n  */\n  static getSkippingParser(until) {\n    return new class extends Parser {\n      createParse(input, fragments, ranges) {\n        let from = ranges[0].from,\n          to = ranges[ranges.length - 1].to;\n        let parser = {\n          parsedPos: from,\n          advance() {\n            let cx = currentContext;\n            if (cx) {\n              for (let r of ranges) cx.tempSkipped.push(r);\n              if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n            }\n            this.parsedPos = to;\n            return new Tree(NodeType.none, [], [], to - from);\n          },\n          stoppedAt: null,\n          stopAt() {}\n        };\n        return parser;\n      }\n    }();\n  }\n  /**\n  @internal\n  */\n  isDone(upto) {\n    upto = Math.min(upto, this.state.doc.length);\n    let frags = this.fragments;\n    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n  }\n  /**\n  Get the context for the current parse, or `null` if no editor\n  parse is in progress.\n  */\n  static get() {\n    return currentContext;\n  }\n}\nfunction cutFragments(fragments, from, to) {\n  return TreeFragment.applyChanges(fragments, [{\n    fromA: from,\n    toA: to,\n    fromB: from,\n    toB: to\n  }]);\n}\nclass LanguageState {\n  constructor(\n  // A mutable parse state that is used to preserve work done during\n  // the lifetime of a state when moving to the next state.\n  context) {\n    this.context = context;\n    this.tree = context.tree;\n  }\n  apply(tr) {\n    if (!tr.docChanged && this.tree == this.context.tree) return this;\n    let newCx = this.context.changes(tr.changes, tr.state);\n    // If the previous parse wasn't done, go forward only up to its\n    // end position or the end of the viewport, to avoid slowing down\n    // state updates with parse work beyond the viewport.\n    let upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n    if (!newCx.work(20 /* Work.Apply */, upto)) newCx.takeTree();\n    return new LanguageState(newCx);\n  }\n  static init(state) {\n    let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);\n    let parseState = ParseContext.create(state.facet(language).parser, state, {\n      from: 0,\n      to: vpTo\n    });\n    if (!parseState.work(20 /* Work.Apply */, vpTo)) parseState.takeTree();\n    return new LanguageState(parseState);\n  }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n  create: LanguageState.init,\n  update(value, tr) {\n    for (let e of tr.effects) if (e.is(Language.setState)) return e.value;\n    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);\n    return value.apply(tr);\n  }\n});\nlet requestIdle = callback => {\n  let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);\n  return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\") requestIdle = callback => {\n  let idle = -1,\n    timeout = setTimeout(() => {\n      idle = requestIdleCallback(callback, {\n        timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */\n      });\n    }, 100 /* Work.MinPause */);\n  return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n};\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n  constructor(view) {\n    this.view = view;\n    this.working = null;\n    this.workScheduled = 0;\n    // End of the current time chunk\n    this.chunkEnd = -1;\n    // Milliseconds of budget left for this chunk\n    this.chunkBudget = -1;\n    this.work = this.work.bind(this);\n    this.scheduleWork();\n  }\n  update(update) {\n    let cx = this.view.state.field(Language.state).context;\n    if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();\n    if (update.docChanged || update.selectionSet) {\n      if (this.view.hasFocus) this.chunkBudget += 50 /* Work.ChangeBonus */;\n      this.scheduleWork();\n    }\n    this.checkAsyncSchedule(cx);\n  }\n  scheduleWork() {\n    if (this.working) return;\n    let {\n        state\n      } = this.view,\n      field = state.field(Language.state);\n    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);\n  }\n  work(deadline) {\n    this.working = null;\n    let now = Date.now();\n    if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {\n      // Start a new chunk\n      this.chunkEnd = now + 30000 /* Work.ChunkTime */;\n      this.chunkBudget = 3000 /* Work.ChunkBudget */;\n    }\n    if (this.chunkBudget <= 0) return; // No more budget\n    let {\n        state,\n        viewport: {\n          to: vpTo\n        }\n      } = this.view,\n      field = state.field(Language.state);\n    if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */)) return;\n    let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n    let done = field.context.work(() => {\n      return isInputPending && isInputPending() || Date.now() > endTime;\n    }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));\n    this.chunkBudget -= Date.now() - now;\n    if (done || this.chunkBudget <= 0) {\n      field.context.takeTree();\n      this.view.dispatch({\n        effects: Language.setState.of(new LanguageState(field.context))\n      });\n    }\n    if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();\n    this.checkAsyncSchedule(field.context);\n  }\n  checkAsyncSchedule(cx) {\n    if (cx.scheduleOn) {\n      this.workScheduled++;\n      cx.scheduleOn.then(() => this.scheduleWork()).catch(err => logException(this.view.state, err)).then(() => this.workScheduled--);\n      cx.scheduleOn = null;\n    }\n  }\n  destroy() {\n    if (this.working) this.working();\n  }\n  isWorking() {\n    return !!(this.working || this.workScheduled > 0);\n  }\n}, {\n  eventHandlers: {\n    focus() {\n      this.scheduleWork();\n    }\n  }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n  combine(languages) {\n    return languages.length ? languages[0] : null;\n  },\n  enables: language => [Language.state, parseWorker, EditorView.contentAttributes.compute([language], state => {\n    let lang = state.facet(language);\n    return lang && lang.name ? {\n      \"data-language\": lang.name\n    } : {};\n  })]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n  /**\n  Create a language support object.\n  */\n  constructor(\n  /**\n  The language object.\n  */\n  language,\n  /**\n  An optional set of supporting extensions. When nesting a\n  language in another language, the outer language is encouraged\n  to include the supporting extensions for its inner languages\n  in its own set of support extensions.\n  */\n  support = []) {\n    this.language = language;\n    this.support = support;\n    this.extension = [language, support];\n  }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n  constructor(\n  /**\n  The name of this language.\n  */\n  name,\n  /**\n  Alternative names for the mode (lowercased, includes `this.name`).\n  */\n  alias,\n  /**\n  File extensions associated with this language.\n  */\n  extensions,\n  /**\n  Optional filename pattern that should be associated with this\n  language.\n  */\n  filename, loadFunc,\n  /**\n  If the language has been loaded, this will hold its value.\n  */\n  support = undefined) {\n    this.name = name;\n    this.alias = alias;\n    this.extensions = extensions;\n    this.filename = filename;\n    this.loadFunc = loadFunc;\n    this.support = support;\n    this.loading = null;\n  }\n  /**\n  Start loading the the language. Will return a promise that\n  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n  object when the language successfully loads.\n  */\n  load() {\n    return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => {\n      this.loading = null;\n      throw err;\n    }));\n  }\n  /**\n  Create a language description.\n  */\n  static of(spec) {\n    let {\n      load,\n      support\n    } = spec;\n    if (!load) {\n      if (!support) throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n      load = () => Promise.resolve(support);\n    }\n    return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n  }\n  /**\n  Look for a language in the given array of descriptions that\n  matches the filename. Will first match\n  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n  and return the first language that matches.\n  */\n  static matchFilename(descs, filename) {\n    for (let d of descs) if (d.filename && d.filename.test(filename)) return d;\n    let ext = /\\.([^.]+)$/.exec(filename);\n    if (ext) for (let d of descs) if (d.extensions.indexOf(ext[1]) > -1) return d;\n    return null;\n  }\n  /**\n  Look for a language whose name or alias matches the the given\n  name (case-insensitively). If `fuzzy` is true, and no direct\n  matchs is found, this'll also search for a language whose name\n  or alias occurs in the string (for names shorter than three\n  characters, only when surrounded by non-word characters).\n  */\n  static matchLanguageName(descs, name, fuzzy = true) {\n    name = name.toLowerCase();\n    for (let d of descs) if (d.alias.some(a => a == name)) return d;\n    if (fuzzy) for (let d of descs) for (let a of d.alias) {\n      let found = name.indexOf(a);\n      if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length]))) return d;\n    }\n    return null;\n  }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting entirely of the same whitespace character.\nWhen not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n  combine: values => {\n    if (!values.length) return \"  \";\n    let unit = values[0];\n    if (!unit || /\\S/.test(unit) || Array.from(unit).some(e => e != unit[0])) throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n    return unit;\n  }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n  let unit = state.facet(indentUnit);\n  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n  let result = \"\",\n    ts = state.tabSize,\n    ch = state.facet(indentUnit)[0];\n  if (ch == \"\\t\") {\n    while (cols >= ts) {\n      result += \"\\t\";\n      cols -= ts;\n    }\n    ch = \" \";\n  }\n  for (let i = 0; i < cols; i++) result += ch;\n  return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/\nfunction getIndentation(context, pos) {\n  if (context instanceof EditorState) context = new IndentContext(context);\n  for (let service of context.state.facet(indentService)) {\n    let result = service(context, pos);\n    if (result !== undefined) return result;\n  }\n  let tree = syntaxTree(context.state);\n  return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\nfunction indentRange(state, from, to) {\n  let updated = Object.create(null);\n  let context = new IndentContext(state, {\n    overrideIndentation: start => {\n      var _a;\n      return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1;\n    }\n  });\n  let changes = [];\n  for (let pos = from; pos <= to;) {\n    let line = state.doc.lineAt(pos);\n    pos = line.to + 1;\n    let indent = getIndentation(context, line.from);\n    if (indent == null) continue;\n    if (!/\\S/.test(line.text)) indent = 0;\n    let cur = /^\\s*/.exec(line.text)[0];\n    let norm = indentString(state, indent);\n    if (cur != norm) {\n      updated[line.from] = indent;\n      changes.push({\n        from: line.from,\n        to: line.from + cur.length,\n        insert: norm\n      });\n    }\n  }\n  return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n  /**\n  Create an indent context.\n  */\n  constructor(\n  /**\n  The editor state.\n  */\n  state,\n  /**\n  @internal\n  */\n  options = {}) {\n    this.state = state;\n    this.options = options;\n    this.unit = getIndentUnit(state);\n  }\n  /**\n  Get a description of the line at the given position, taking\n  [simulated line\n  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  into account. If there is such a break at `pos`, the `bias`\n  argument determines whether the part of the line line before or\n  after the break is used.\n  */\n  lineAt(pos, bias = 1) {\n    let line = this.state.doc.lineAt(pos);\n    let {\n      simulateBreak,\n      simulateDoubleBreak\n    } = this.options;\n    if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n      if (simulateDoubleBreak && simulateBreak == pos) return {\n        text: \"\",\n        from: pos\n      };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {\n        text: line.text.slice(simulateBreak - line.from),\n        from: simulateBreak\n      };else return {\n        text: line.text.slice(0, simulateBreak - line.from),\n        from: line.from\n      };\n    }\n    return line;\n  }\n  /**\n  Get the text directly after `pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n  textAfterPos(pos, bias = 1) {\n    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return \"\";\n    let {\n      text,\n      from\n    } = this.lineAt(pos, bias);\n    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n  }\n  /**\n  Find the column for the given position.\n  */\n  column(pos, bias = 1) {\n    let {\n      text,\n      from\n    } = this.lineAt(pos, bias);\n    let result = this.countColumn(text, pos - from);\n    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n    if (override > -1) result += override - this.countColumn(text, text.search(/\\S|$/));\n    return result;\n  }\n  /**\n  Find the column position (taking tabs into account) of the given\n  position in the given string.\n  */\n  countColumn(line, pos = line.length) {\n    return countColumn(line, this.state.tabSize, pos);\n  }\n  /**\n  Find the indentation column of the line at the given point.\n  */\n  lineIndent(pos, bias = 1) {\n    let {\n      text,\n      from\n    } = this.lineAt(pos, bias);\n    let override = this.options.overrideIndentation;\n    if (override) {\n      let overriden = override(from);\n      if (overriden > -1) return overriden;\n    }\n    return this.countColumn(text, text.search(/\\S|$/));\n  }\n  /**\n  Returns the [simulated line\n  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  for this context, if any.\n  */\n  get simulatedBreak() {\n    return this.options.simulateBreak || null;\n  }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n  let stack = ast.resolveStack(pos);\n  let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);\n  if (inner != stack.node) {\n    let add = [];\n    for (let cur = inner; cur && !(cur.from < stack.node.from || cur.to > stack.node.to || cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent) add.push(cur);\n    for (let i = add.length - 1; i >= 0; i--) stack = {\n      node: add[i],\n      next: stack\n    };\n  }\n  return indentFor(stack, cx, pos);\n}\nfunction indentFor(stack, cx, pos) {\n  for (let cur = stack; cur; cur = cur.next) {\n    let strategy = indentStrategy(cur.node);\n    if (strategy) return strategy(TreeIndentContext.create(cx, pos, cur));\n  }\n  return 0;\n}\nfunction ignoreClosed(cx) {\n  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n  let strategy = tree.type.prop(indentNodeProp);\n  if (strategy) return strategy;\n  let first = tree.firstChild,\n    close;\n  if (first && (close = first.type.prop(NodeProp.closedBy))) {\n    let last = tree.lastChild,\n      closed = last && close.indexOf(last.name) > -1;\n    return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n  }\n  return tree.parent == null ? topIndent : null;\n}\nfunction topIndent() {\n  return 0;\n}\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\nclass TreeIndentContext extends IndentContext {\n  constructor(base,\n  /**\n  The position at which indentation is being computed.\n  */\n  pos,\n  /**\n  @internal\n  */\n  context) {\n    super(base.state, base.options);\n    this.base = base;\n    this.pos = pos;\n    this.context = context;\n  }\n  /**\n  The syntax tree node to which the indentation strategy\n  applies.\n  */\n  get node() {\n    return this.context.node;\n  }\n  /**\n  @internal\n  */\n  static create(base, pos, context) {\n    return new TreeIndentContext(base, pos, context);\n  }\n  /**\n  Get the text directly after `this.pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n  get textAfter() {\n    return this.textAfterPos(this.pos);\n  }\n  /**\n  Get the indentation at the reference line for `this.node`, which\n  is the line on which it starts, unless there is a node that is\n  _not_ a parent of this node covering the start of that line. If\n  so, the line at the start of that node is tried, again skipping\n  on if it is covered by another such node.\n  */\n  get baseIndent() {\n    return this.baseIndentFor(this.node);\n  }\n  /**\n  Get the indentation for the reference line of the given node\n  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n  */\n  baseIndentFor(node) {\n    let line = this.state.doc.lineAt(node.from);\n    // Skip line starts that are covered by a sibling (or cousin, etc)\n    for (;;) {\n      let atBreak = node.resolve(line.from);\n      while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;\n      if (isParent(atBreak, node)) break;\n      line = this.state.doc.lineAt(atBreak.from);\n    }\n    return this.lineIndent(line.from);\n  }\n  /**\n  Continue looking for indentations in the node's parent nodes,\n  and return the result of that.\n  */\n  continue() {\n    return indentFor(this.context.next, this.base, this.pos);\n  }\n}\nfunction isParent(parent, of) {\n  for (let cur = of; cur; cur = cur.parent) if (parent == cur) return true;\n  return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n  let tree = context.node;\n  let openToken = tree.childAfter(tree.from),\n    last = tree.lastChild;\n  if (!openToken) return null;\n  let sim = context.options.simulateBreak;\n  let openLine = context.state.doc.lineAt(openToken.from);\n  let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n  for (let pos = openToken.to;;) {\n    let next = tree.childAfter(pos);\n    if (!next || next == last) return null;\n    if (!next.type.isSkipped) {\n      if (next.from >= lineEnd) return null;\n      let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;\n      return {\n        from: openToken.from,\n        to: openToken.to + space\n      };\n    }\n    pos = next.to;\n  }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({\n  closing,\n  align = true,\n  units = 1\n}) {\n  return context => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n  let after = context.textAfter,\n    space = after.match(/^\\s*/)[0].length;\n  let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n  let aligned = align ? bracketedAligned(context) : null;\n  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);\n  return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = context => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({\n  except,\n  units = 1\n} = {}) {\n  return context => {\n    let matchExcept = except && except.test(context.textAfter);\n    return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n  };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n  return EditorState.transactionFilter.of(tr => {\n    if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\")) return tr;\n    let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n    if (!rules.length) return tr;\n    let doc = tr.newDoc,\n      {\n        head\n      } = tr.newSelection.main,\n      line = doc.lineAt(head);\n    if (head > line.from + DontIndentBeyond) return tr;\n    let lineStart = doc.sliceString(line.from, head);\n    if (!rules.some(r => r.test(lineStart))) return tr;\n    let {\n        state\n      } = tr,\n      last = -1,\n      changes = [];\n    for (let {\n      head\n    } of state.selection.ranges) {\n      let line = state.doc.lineAt(head);\n      if (line.from == last) continue;\n      last = line.from;\n      let indent = getIndentation(state, line.from);\n      if (indent == null) continue;\n      let cur = /^\\s*/.exec(line.text)[0];\n      let norm = indentString(state, indent);\n      if (cur != norm) changes.push({\n        from: line.from,\n        to: line.from + cur.length,\n        insert: norm\n      });\n    }\n    return changes.length ? [tr, {\n      changes,\n      sequential: true\n    }] : tr;\n  });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n  let first = node.firstChild,\n    last = node.lastChild;\n  return first && first.to < last.from ? {\n    from: first.to,\n    to: last.type.isError ? node.to : last.from\n  } : null;\n}\nfunction syntaxFolding(state, start, end) {\n  let tree = syntaxTree(state);\n  if (tree.length < end) return null;\n  let stack = tree.resolveStack(end, 1);\n  let found = null;\n  for (let iter = stack; iter; iter = iter.next) {\n    let cur = iter.node;\n    if (cur.to <= end || cur.from > end) continue;\n    if (found && cur.from < start) break;\n    let prop = cur.type.prop(foldNodeProp);\n    if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n      let value = prop(cur, state);\n      if (value && value.from <= end && value.from >= start && value.to > end) found = value;\n    }\n  }\n  return found;\n}\nfunction isUnfinished(node) {\n  let ch = node.lastChild;\n  return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n  for (let service of state.facet(foldService)) {\n    let result = service(state, lineStart, lineEnd);\n    if (result) return result;\n  }\n  return syntaxFolding(state, lineStart, lineEnd);\n}\nfunction mapRange(range, mapping) {\n  let from = mapping.mapPos(range.from, 1),\n    to = mapping.mapPos(range.to, -1);\n  return from >= to ? undefined : {\n    from,\n    to\n  };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstancesâ€”usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\nconst foldEffect = /*@__PURE__*/StateEffect.define({\n  map: mapRange\n});\n/**\nState effect that unfolds the given range (if it was folded).\n*/\nconst unfoldEffect = /*@__PURE__*/StateEffect.define({\n  map: mapRange\n});\nfunction selectedLines(view) {\n  let lines = [];\n  for (let {\n    head\n  } of view.state.selection.ranges) {\n    if (lines.some(l => l.from <= head && l.to >= head)) continue;\n    lines.push(view.lineBlockAt(head));\n  }\n  return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\nconst foldState = /*@__PURE__*/StateField.define({\n  create() {\n    return Decoration.none;\n  },\n  update(folded, tr) {\n    if (tr.isUserEvent(\"delete\")) tr.changes.iterChangedRanges((fromA, toA) => folded = clearTouchedFolds(folded, fromA, toA));\n    folded = folded.map(tr.changes);\n    for (let e of tr.effects) {\n      if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {\n        let {\n          preparePlaceholder\n        } = tr.state.facet(foldConfig);\n        let widget = !preparePlaceholder ? foldWidget : Decoration.replace({\n          widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value))\n        });\n        folded = folded.update({\n          add: [widget.range(e.value.from, e.value.to)]\n        });\n      } else if (e.is(unfoldEffect)) {\n        folded = folded.update({\n          filter: (from, to) => e.value.from != from || e.value.to != to,\n          filterFrom: e.value.from,\n          filterTo: e.value.to\n        });\n      }\n    }\n    // Clear folded ranges that cover the selection head\n    if (tr.selection) folded = clearTouchedFolds(folded, tr.selection.main.head);\n    return folded;\n  },\n  provide: f => EditorView.decorations.from(f),\n  toJSON(folded, state) {\n    let ranges = [];\n    folded.between(0, state.doc.length, (from, to) => {\n      ranges.push(from, to);\n    });\n    return ranges;\n  },\n  fromJSON(value) {\n    if (!Array.isArray(value) || value.length % 2) throw new RangeError(\"Invalid JSON for fold state\");\n    let ranges = [];\n    for (let i = 0; i < value.length;) {\n      let from = value[i++],\n        to = value[i++];\n      if (typeof from != \"number\" || typeof to != \"number\") throw new RangeError(\"Invalid JSON for fold state\");\n      ranges.push(foldWidget.range(from, to));\n    }\n    return Decoration.set(ranges, true);\n  }\n});\nfunction clearTouchedFolds(folded, from, to = from) {\n  let touched = false;\n  folded.between(from, to, (a, b) => {\n    if (a < to && b > from) touched = true;\n  });\n  return !touched ? folded : folded.update({\n    filterFrom: from,\n    filterTo: to,\n    filter: (a, b) => a >= to || b <= from\n  });\n}\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\nfunction foldedRanges(state) {\n  return state.field(foldState, false) || RangeSet.empty;\n}\nfunction findFold(state, from, to) {\n  var _a;\n  let found = null;\n  (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\n    if (!found || found.from > from) found = {\n      from,\n      to\n    };\n  });\n  return found;\n}\nfunction foldExists(folded, from, to) {\n  let found = false;\n  folded.between(from, from, (a, b) => {\n    if (a == from && b == to) found = true;\n  });\n  return found;\n}\nfunction maybeEnable(state, other) {\n  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\nconst foldCode = view => {\n  for (let line of selectedLines(view)) {\n    let range = foldable(view.state, line.from, line.to);\n    if (range) {\n      view.dispatch({\n        effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])\n      });\n      return true;\n    }\n  }\n  return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\nconst unfoldCode = view => {\n  if (!view.state.field(foldState, false)) return false;\n  let effects = [];\n  for (let line of selectedLines(view)) {\n    let folded = findFold(view.state, line.from, line.to);\n    if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n  }\n  if (effects.length) view.dispatch({\n    effects\n  });\n  return effects.length > 0;\n};\nfunction announceFold(view, range, fold = true) {\n  let lineFrom = view.state.doc.lineAt(range.from).number,\n    lineTo = view.state.doc.lineAt(range.to).number;\n  return EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\nconst foldAll = view => {\n  let {\n      state\n    } = view,\n    effects = [];\n  for (let pos = 0; pos < state.doc.length;) {\n    let line = view.lineBlockAt(pos),\n      range = foldable(state, line.from, line.to);\n    if (range) effects.push(foldEffect.of(range));\n    pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n  }\n  if (effects.length) view.dispatch({\n    effects: maybeEnable(view.state, effects)\n  });\n  return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\nconst unfoldAll = view => {\n  let field = view.state.field(foldState, false);\n  if (!field || !field.size) return false;\n  let effects = [];\n  field.between(0, view.state.doc.length, (from, to) => {\n    effects.push(unfoldEffect.of({\n      from,\n      to\n    }));\n  });\n  view.dispatch({\n    effects\n  });\n  return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction foldableContainer(view, lineBlock) {\n  // Look backwards through line blocks until we find a foldable region that\n  // intersects with the line\n  for (let line = lineBlock;;) {\n    let foldableRegion = foldable(view.state, line.from, line.to);\n    if (foldableRegion && foldableRegion.to > lineBlock.from) return foldableRegion;\n    if (!line.from) return null;\n    line = view.lineBlockAt(line.from - 1);\n  }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/\nconst toggleFold = view => {\n  let effects = [];\n  for (let line of selectedLines(view)) {\n    let folded = findFold(view.state, line.from, line.to);\n    if (folded) {\n      effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    } else {\n      let foldRange = foldableContainer(view, line);\n      if (foldRange) effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));\n    }\n  }\n  if (effects.length > 0) view.dispatch({\n    effects: maybeEnable(view.state, effects)\n  });\n  return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\nconst foldKeymap = [{\n  key: \"Ctrl-Shift-[\",\n  mac: \"Cmd-Alt-[\",\n  run: foldCode\n}, {\n  key: \"Ctrl-Shift-]\",\n  mac: \"Cmd-Alt-]\",\n  run: unfoldCode\n}, {\n  key: \"Ctrl-Alt-[\",\n  run: foldAll\n}, {\n  key: \"Ctrl-Alt-]\",\n  run: unfoldAll\n}];\nconst defaultConfig = {\n  placeholderDOM: null,\n  preparePlaceholder: null,\n  placeholderText: \"â€¦\"\n};\nconst foldConfig = /*@__PURE__*/Facet.define({\n  combine(values) {\n    return combineConfig(values, defaultConfig);\n  }\n});\n/**\nCreate an extension that configures code folding.\n*/\nfunction codeFolding(config) {\n  let result = [foldState, baseTheme$1];\n  if (config) result.push(foldConfig.of(config));\n  return result;\n}\nfunction widgetToDOM(view, prepared) {\n  let {\n      state\n    } = view,\n    conf = state.facet(foldConfig);\n  let onclick = event => {\n    let line = view.lineBlockAt(view.posAtDOM(event.target));\n    let folded = findFold(view.state, line.from, line.to);\n    if (folded) view.dispatch({\n      effects: unfoldEffect.of(folded)\n    });\n    event.preventDefault();\n  };\n  if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick, prepared);\n  let element = document.createElement(\"span\");\n  element.textContent = conf.placeholderText;\n  element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n  element.title = state.phrase(\"unfold\");\n  element.className = \"cm-foldPlaceholder\";\n  element.onclick = onclick;\n  return element;\n}\nconst foldWidget = /*@__PURE__*/Decoration.replace({\n  widget: /*@__PURE__*/new class extends WidgetType {\n    toDOM(view) {\n      return widgetToDOM(view, null);\n    }\n  }()\n});\nclass PreparedFoldWidget extends WidgetType {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  eq(other) {\n    return this.value == other.value;\n  }\n  toDOM(view) {\n    return widgetToDOM(view, this.value);\n  }\n}\nconst foldGutterDefaults = {\n  openText: \"âŒ„\",\n  closedText: \"â€º\",\n  markerDOM: null,\n  domEventHandlers: {},\n  foldingChanged: () => false\n};\nclass FoldMarker extends GutterMarker {\n  constructor(config, open) {\n    super();\n    this.config = config;\n    this.open = open;\n  }\n  eq(other) {\n    return this.config == other.config && this.open == other.open;\n  }\n  toDOM(view) {\n    if (this.config.markerDOM) return this.config.markerDOM(this.open);\n    let span = document.createElement(\"span\");\n    span.textContent = this.open ? this.config.openText : this.config.closedText;\n    span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n    return span;\n  }\n}\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\nfunction foldGutter(config = {}) {\n  let fullConfig = {\n    ...foldGutterDefaults,\n    ...config\n  };\n  let canFold = new FoldMarker(fullConfig, true),\n    canUnfold = new FoldMarker(fullConfig, false);\n  let markers = ViewPlugin.fromClass(class {\n    constructor(view) {\n      this.from = view.viewport.from;\n      this.markers = this.buildMarkers(view);\n    }\n    update(update) {\n      if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update)) this.markers = this.buildMarkers(update.view);\n    }\n    buildMarkers(view) {\n      let builder = new RangeSetBuilder();\n      for (let line of view.viewportLineBlocks) {\n        let mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;\n        if (mark) builder.add(line.from, line.from, mark);\n      }\n      return builder.finish();\n    }\n  });\n  let {\n    domEventHandlers\n  } = fullConfig;\n  return [markers, gutter({\n    class: \"cm-foldGutter\",\n    markers(view) {\n      var _a;\n      return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty;\n    },\n    initialSpacer() {\n      return new FoldMarker(fullConfig, false);\n    },\n    domEventHandlers: {\n      ...domEventHandlers,\n      click: (view, line, event) => {\n        if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded) {\n          view.dispatch({\n            effects: unfoldEffect.of(folded)\n          });\n          return true;\n        }\n        let range = foldable(view.state, line.from, line.to);\n        if (range) {\n          view.dispatch({\n            effects: foldEffect.of(range)\n          });\n          return true;\n        }\n        return false;\n      }\n    }\n  }), codeFolding()];\n}\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-foldPlaceholder\": {\n    backgroundColor: \"#eee\",\n    border: \"1px solid #ddd\",\n    color: \"#888\",\n    borderRadius: \".2em\",\n    margin: \"0 1px\",\n    padding: \"0 1px\",\n    cursor: \"pointer\"\n  },\n  \".cm-foldGutter span\": {\n    padding: \"0 1px\",\n    cursor: \"pointer\"\n  }\n});\n\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\nclass HighlightStyle {\n  constructor(\n  /**\n  The tag styles used to create this highlight style.\n  */\n  specs, options) {\n    this.specs = specs;\n    let modSpec;\n    function def(spec) {\n      let cls = StyleModule.newName();\n      (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n      return cls;\n    }\n    const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n    const scopeOpt = options.scope;\n    this.scope = scopeOpt instanceof Language ? type => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? type => type == scopeOpt : undefined;\n    this.style = tagHighlighter(specs.map(style => ({\n      tag: style.tag,\n      class: style.class || def(Object.assign({}, style, {\n        tag: null\n      }))\n    })), {\n      all\n    }).style;\n    this.module = modSpec ? new StyleModule(modSpec) : null;\n    this.themeType = options.themeType;\n  }\n  /**\n  Create a highlighter style that associates the given styles to\n  the given tags. The specs must be objects that hold a style tag\n  or array of tags in their `tag` property, and either a single\n  `class` property providing a static CSS class (for highlighter\n  that rely on external styling), or a\n  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n  set of CSS properties (which define the styling for those tags).\n  \n  The CSS rules created for a highlighter will be emitted in the\n  order of the spec's properties. That means that for elements that\n  have multiple tags associated with them, styles defined further\n  down in the list will have a higher CSS precedence than styles\n  defined earlier.\n  */\n  static define(specs, options) {\n    return new HighlightStyle(specs, options || {});\n  }\n}\nconst highlighterFacet = /*@__PURE__*/Facet.define();\nconst fallbackHighlighter = /*@__PURE__*/Facet.define({\n  combine(values) {\n    return values.length ? [values[0]] : null;\n  }\n});\nfunction getHighlighters(state) {\n  let main = state.facet(highlighterFacet);\n  return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\nfunction syntaxHighlighting(highlighter, options) {\n  let ext = [treeHighlighter],\n    themeType;\n  if (highlighter instanceof HighlightStyle) {\n    if (highlighter.module) ext.push(EditorView.styleModule.of(highlighter.module));\n    themeType = highlighter.themeType;\n  }\n  if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {\n    return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n  }));else ext.push(highlighterFacet.of(highlighter));\n  return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\nfunction highlightingFor(state, tags, scope) {\n  let highlighters = getHighlighters(state);\n  let result = null;\n  if (highlighters) for (let highlighter of highlighters) {\n    if (!highlighter.scope || scope && highlighter.scope(scope)) {\n      let cls = highlighter.style(tags);\n      if (cls) result = result ? result + \" \" + cls : cls;\n    }\n  }\n  return result;\n}\nclass TreeHighlighter {\n  constructor(view) {\n    this.markCache = Object.create(null);\n    this.tree = syntaxTree(view.state);\n    this.decorations = this.buildDeco(view, getHighlighters(view.state));\n    this.decoratedTo = view.viewport.to;\n  }\n  update(update) {\n    let tree = syntaxTree(update.state),\n      highlighters = getHighlighters(update.state);\n    let styleChange = highlighters != getHighlighters(update.startState);\n    let {\n        viewport\n      } = update.view,\n      decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);\n    if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {\n      this.decorations = this.decorations.map(update.changes);\n      this.decoratedTo = decoratedToMapped;\n    } else if (tree != this.tree || update.viewportChanged || styleChange) {\n      this.tree = tree;\n      this.decorations = this.buildDeco(update.view, highlighters);\n      this.decoratedTo = viewport.to;\n    }\n  }\n  buildDeco(view, highlighters) {\n    if (!highlighters || !this.tree.length) return Decoration.none;\n    let builder = new RangeSetBuilder();\n    for (let {\n      from,\n      to\n    } of view.visibleRanges) {\n      highlightTree(this.tree, highlighters, (from, to, style) => {\n        builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({\n          class: style\n        })));\n      }, from, to);\n    }\n    return builder.finish();\n  }\n}\nconst treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n  decorations: v => v.decorations\n}));\n/**\nA default highlight style (works well with light themes).\n*/\nconst defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{\n  tag: tags.meta,\n  color: \"#404740\"\n}, {\n  tag: tags.link,\n  textDecoration: \"underline\"\n}, {\n  tag: tags.heading,\n  textDecoration: \"underline\",\n  fontWeight: \"bold\"\n}, {\n  tag: tags.emphasis,\n  fontStyle: \"italic\"\n}, {\n  tag: tags.strong,\n  fontWeight: \"bold\"\n}, {\n  tag: tags.strikethrough,\n  textDecoration: \"line-through\"\n}, {\n  tag: tags.keyword,\n  color: \"#708\"\n}, {\n  tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n  color: \"#219\"\n}, {\n  tag: [tags.literal, tags.inserted],\n  color: \"#164\"\n}, {\n  tag: [tags.string, tags.deleted],\n  color: \"#a11\"\n}, {\n  tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n  color: \"#e40\"\n}, {\n  tag: /*@__PURE__*/tags.definition(tags.variableName),\n  color: \"#00f\"\n}, {\n  tag: /*@__PURE__*/tags.local(tags.variableName),\n  color: \"#30a\"\n}, {\n  tag: [tags.typeName, tags.namespace],\n  color: \"#085\"\n}, {\n  tag: tags.className,\n  color: \"#167\"\n}, {\n  tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n  color: \"#256\"\n}, {\n  tag: /*@__PURE__*/tags.definition(tags.propertyName),\n  color: \"#00c\"\n}, {\n  tag: tags.comment,\n  color: \"#940\"\n}, {\n  tag: tags.invalid,\n  color: \"#f00\"\n}]);\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n  \"&.cm-focused .cm-matchingBracket\": {\n    backgroundColor: \"#328c8252\"\n  },\n  \"&.cm-focused .cm-nonmatchingBracket\": {\n    backgroundColor: \"#bb555544\"\n  }\n});\nconst DefaultScanDist = 10000,\n  DefaultBrackets = \"()[]{}\";\nconst bracketMatchingConfig = /*@__PURE__*/Facet.define({\n  combine(configs) {\n    return combineConfig(configs, {\n      afterCursor: true,\n      brackets: DefaultBrackets,\n      maxScanDistance: DefaultScanDist,\n      renderMatch: defaultRenderMatch\n    });\n  }\n});\nconst matchingMark = /*@__PURE__*/Decoration.mark({\n    class: \"cm-matchingBracket\"\n  }),\n  nonmatchingMark = /*@__PURE__*/Decoration.mark({\n    class: \"cm-nonmatchingBracket\"\n  });\nfunction defaultRenderMatch(match) {\n  let decorations = [];\n  let mark = match.matched ? matchingMark : nonmatchingMark;\n  decorations.push(mark.range(match.start.from, match.start.to));\n  if (match.end) decorations.push(mark.range(match.end.from, match.end.to));\n  return decorations;\n}\nconst bracketMatchingState = /*@__PURE__*/StateField.define({\n  create() {\n    return Decoration.none;\n  },\n  update(deco, tr) {\n    if (!tr.docChanged && !tr.selection) return deco;\n    let decorations = [];\n    let config = tr.state.facet(bracketMatchingConfig);\n    for (let range of tr.state.selection.ranges) {\n      if (!range.empty) continue;\n      let match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));\n      if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));\n    }\n    return Decoration.set(decorations, true);\n  },\n  provide: f => EditorView.decorations.from(f)\n});\nconst bracketMatchingUnique = [bracketMatchingState, baseTheme];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\nfunction bracketMatching(config = {}) {\n  return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a â€˜handleâ€™â€”the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/\nconst bracketMatchingHandle = /*@__PURE__*/new NodeProp();\nfunction matchingNodes(node, dir, brackets) {\n  let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n  if (byProp) return byProp;\n  if (node.name.length == 1) {\n    let index = brackets.indexOf(node.name);\n    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];\n  }\n  return null;\n}\nfunction findHandle(node) {\n  let hasHandle = node.type.prop(bracketMatchingHandle);\n  return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\nfunction matchBrackets(state, pos, dir, config = {}) {\n  let maxScanDistance = config.maxScanDistance || DefaultScanDist,\n    brackets = config.brackets || DefaultBrackets;\n  let tree = syntaxTree(state),\n    node = tree.resolveInner(pos, dir);\n  for (let cur = node; cur; cur = cur.parent) {\n    let matches = matchingNodes(cur.type, dir, brackets);\n    if (matches && cur.from < cur.to) {\n      let handle = findHandle(cur);\n      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to)) return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n    }\n  }\n  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n  let parent = token.parent,\n    firstToken = {\n      from: handle.from,\n      to: handle.to\n    };\n  let depth = 0,\n    cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {\n    if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n      if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n        let endHandle = findHandle(cursor);\n        return {\n          start: firstToken,\n          end: endHandle ? {\n            from: endHandle.from,\n            to: endHandle.to\n          } : undefined,\n          matched: true\n        };\n      } else if (matchingNodes(cursor.type, dir, brackets)) {\n        depth++;\n      } else if (matchingNodes(cursor.type, -dir, brackets)) {\n        if (depth == 0) {\n          let endHandle = findHandle(cursor);\n          return {\n            start: firstToken,\n            end: endHandle && endHandle.from < endHandle.to ? {\n              from: endHandle.from,\n              to: endHandle.to\n            } : undefined,\n            matched: false\n          };\n        }\n        depth--;\n      }\n    }\n  } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n  return {\n    start: firstToken,\n    matched: false\n  };\n}\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n  let bracket = brackets.indexOf(startCh);\n  if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;\n  let startToken = {\n    from: dir < 0 ? pos - 1 : pos,\n    to: dir > 0 ? pos + 1 : pos\n  };\n  let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),\n    depth = 0;\n  for (let distance = 0; !iter.next().done && distance <= maxScanDistance;) {\n    let text = iter.value;\n    if (dir < 0) distance += text.length;\n    let basePos = pos + distance * dir;\n    for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\n      let found = brackets.indexOf(text[pos]);\n      if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType) continue;\n      if (found % 2 == 0 == dir > 0) {\n        depth++;\n      } else if (depth == 1) {\n        // Closing\n        return {\n          start: startToken,\n          end: {\n            from: basePos + pos,\n            to: basePos + pos + 1\n          },\n          matched: found >> 1 == bracket >> 1\n        };\n      } else {\n        depth--;\n      }\n    }\n    if (dir > 0) distance += text.length;\n  }\n  return iter.done ? {\n    start: startToken,\n    matched: false\n  } : null;\n}\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n  if (end == null) {\n    end = string.search(/[^\\s\\u00a0]/);\n    if (end == -1) end = string.length;\n  }\n  let n = startValue;\n  for (let i = startIndex; i < end; i++) {\n    if (string.charCodeAt(i) == 9) n += tabSize - n % tabSize;else n++;\n  }\n  return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n  /**\n  Create a stream.\n  */\n  constructor(\n  /**\n  The line.\n  */\n  string, tabSize,\n  /**\n  The current indent unit size.\n  */\n  indentUnit, overrideIndent) {\n    this.string = string;\n    this.tabSize = tabSize;\n    this.indentUnit = indentUnit;\n    this.overrideIndent = overrideIndent;\n    /**\n    The current position on the line.\n    */\n    this.pos = 0;\n    /**\n    The start position of the current token.\n    */\n    this.start = 0;\n    this.lastColumnPos = 0;\n    this.lastColumnValue = 0;\n  }\n  /**\n  True if we are at the end of the line.\n  */\n  eol() {\n    return this.pos >= this.string.length;\n  }\n  /**\n  True if we are at the start of the line.\n  */\n  sol() {\n    return this.pos == 0;\n  }\n  /**\n  Get the next code unit after the current position, or undefined\n  if we're at the end of the line.\n  */\n  peek() {\n    return this.string.charAt(this.pos) || undefined;\n  }\n  /**\n  Read the next code unit and advance `this.pos`.\n  */\n  next() {\n    if (this.pos < this.string.length) return this.string.charAt(this.pos++);\n  }\n  /**\n  Match the next character against the given string, regular\n  expression, or predicate. Consume and return it if it matches.\n  */\n  eat(match) {\n    let ch = this.string.charAt(this.pos);\n    let ok;\n    if (typeof match == \"string\") ok = ch == match;else ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n    if (ok) {\n      ++this.pos;\n      return ch;\n    }\n  }\n  /**\n  Continue matching characters that match the given string,\n  regular expression, or predicate function. Return true if any\n  characters were consumed.\n  */\n  eatWhile(match) {\n    let start = this.pos;\n    while (this.eat(match)) {}\n    return this.pos > start;\n  }\n  /**\n  Consume whitespace ahead of `this.pos`. Return true if any was\n  found.\n  */\n  eatSpace() {\n    let start = this.pos;\n    while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos))) ++this.pos;\n    return this.pos > start;\n  }\n  /**\n  Move to the end of the line.\n  */\n  skipToEnd() {\n    this.pos = this.string.length;\n  }\n  /**\n  Move to directly before the given character, if found on the\n  current line.\n  */\n  skipTo(ch) {\n    let found = this.string.indexOf(ch, this.pos);\n    if (found > -1) {\n      this.pos = found;\n      return true;\n    }\n  }\n  /**\n  Move back `n` characters.\n  */\n  backUp(n) {\n    this.pos -= n;\n  }\n  /**\n  Get the column position at `this.pos`.\n  */\n  column() {\n    if (this.lastColumnPos < this.start) {\n      this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n      this.lastColumnPos = this.start;\n    }\n    return this.lastColumnValue;\n  }\n  /**\n  Get the indentation column of the current line.\n  */\n  indentation() {\n    var _a;\n    return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);\n  }\n  /**\n  Match the input against the given string or regular expression\n  (which should start with a `^`). Return true or the regexp match\n  if it matches.\n  \n  Unless `consume` is set to `false`, this will move `this.pos`\n  past the matched text.\n  \n  When matching a string `caseInsensitive` can be set to true to\n  make the match case-insensitive.\n  */\n  match(pattern, consume, caseInsensitive) {\n    if (typeof pattern == \"string\") {\n      let cased = str => caseInsensitive ? str.toLowerCase() : str;\n      let substr = this.string.substr(this.pos, pattern.length);\n      if (cased(substr) == cased(pattern)) {\n        if (consume !== false) this.pos += pattern.length;\n        return true;\n      } else return null;\n    } else {\n      let match = this.string.slice(this.pos).match(pattern);\n      if (match && match.index > 0) return null;\n      if (match && consume !== false) this.pos += match[0].length;\n      return match;\n    }\n  }\n  /**\n  Get the current token.\n  */\n  current() {\n    return this.string.slice(this.start, this.pos);\n  }\n}\nfunction fullParser(spec) {\n  return {\n    name: spec.name || \"\",\n    token: spec.token,\n    blankLine: spec.blankLine || (() => {}),\n    startState: spec.startState || (() => true),\n    copyState: spec.copyState || defaultCopyState,\n    indent: spec.indent || (() => null),\n    languageData: spec.languageData || {},\n    tokenTable: spec.tokenTable || noTokens,\n    mergeTokens: spec.mergeTokens !== false\n  };\n}\nfunction defaultCopyState(state) {\n  if (typeof state != \"object\") return state;\n  let newState = {};\n  for (let prop in state) {\n    let val = state[prop];\n    newState[prop] = val instanceof Array ? val.slice() : val;\n  }\n  return newState;\n}\nconst IndentedFrom = /*@__PURE__*/new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\nclass StreamLanguage extends Language {\n  constructor(parser) {\n    let data = defineLanguageFacet(parser.languageData);\n    let p = fullParser(parser),\n      self;\n    let impl = new class extends Parser {\n      createParse(input, fragments, ranges) {\n        return new Parse(self, input, fragments, ranges);\n      }\n    }();\n    super(data, impl, [], parser.name);\n    this.topNode = docID(data, this);\n    self = this;\n    this.streamParser = p;\n    this.stateAfter = new NodeProp({\n      perNode: true\n    });\n    this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n  }\n  /**\n  Define a stream language.\n  */\n  static define(spec) {\n    return new StreamLanguage(spec);\n  }\n  /**\n  @internal\n  */\n  getIndent(cx) {\n    let from = undefined;\n    let {\n      overrideIndentation\n    } = cx.options;\n    if (overrideIndentation) {\n      from = IndentedFrom.get(cx.state);\n      if (from != null && from < cx.pos - 1e4) from = undefined;\n    }\n    let start = findState(this, cx.node.tree, cx.node.from, cx.node.from, from !== null && from !== void 0 ? from : cx.pos),\n      statePos,\n      state;\n    if (start) {\n      state = start.state;\n      statePos = start.pos + 1;\n    } else {\n      state = this.streamParser.startState(cx.unit);\n      statePos = cx.node.from;\n    }\n    if (cx.pos - statePos > 10000 /* C.MaxIndentScanDist */) return null;\n    while (statePos < cx.pos) {\n      let line = cx.state.doc.lineAt(statePos),\n        end = Math.min(cx.pos, line.to);\n      if (line.length) {\n        let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;\n        let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n        while (stream.pos < end - line.from) readToken(this.streamParser.token, stream, state);\n      } else {\n        this.streamParser.blankLine(state, cx.unit);\n      }\n      if (end == cx.pos) break;\n      statePos = line.to + 1;\n    }\n    let line = cx.lineAt(cx.pos);\n    if (overrideIndentation && from == null) IndentedFrom.set(cx.state, line.from);\n    return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n  }\n  get allowsNesting() {\n    return false;\n  }\n}\nfunction findState(lang, tree, off, startPos, before) {\n  let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n  if (state) return {\n    state: lang.streamParser.copyState(state),\n    pos: off + tree.length\n  };\n  for (let i = tree.children.length - 1; i >= 0; i--) {\n    let child = tree.children[i],\n      pos = off + tree.positions[i];\n    let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n    if (found) return found;\n  }\n  return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n  if (inside && from <= 0 && to >= tree.length) return tree;\n  if (!inside && from == 0 && tree.type == lang.topNode) inside = true;\n  for (let i = tree.children.length - 1; i >= 0; i--) {\n    let pos = tree.positions[i],\n      child = tree.children[i],\n      inner;\n    if (pos < to && child instanceof Tree) {\n      if (!(inner = cutTree(lang, child, from - pos, to - pos, inside))) break;\n      return !inside ? inner : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n    }\n  }\n  return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, endPos, editorState) {\n  for (let f of fragments) {\n    let from = f.from + (f.openStart ? 25 : 0),\n      to = f.to - (f.openEnd ? 25 : 0);\n    let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to),\n      tree;\n    if (found && found.pos <= endPos && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false))) return {\n      state: found.state,\n      tree\n    };\n  }\n  return {\n    state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4),\n    tree: Tree.empty\n  };\n}\nclass Parse {\n  constructor(lang, input, fragments, ranges) {\n    this.lang = lang;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.stoppedAt = null;\n    this.chunks = [];\n    this.chunkPos = [];\n    this.chunk = [];\n    this.chunkReused = undefined;\n    this.rangeIndex = 0;\n    this.to = ranges[ranges.length - 1].to;\n    let context = ParseContext.get(),\n      from = ranges[0].from;\n    let {\n      state,\n      tree\n    } = findStartInFragments(lang, fragments, from, this.to, context === null || context === void 0 ? void 0 : context.state);\n    this.state = state;\n    this.parsedPos = this.chunkStart = from + tree.length;\n    for (let i = 0; i < tree.children.length; i++) {\n      this.chunks.push(tree.children[i]);\n      this.chunkPos.push(tree.positions[i]);\n    }\n    if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */ && ranges.some(r => r.from <= context.viewport.from && r.to >= context.viewport.from)) {\n      this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n      context.skipUntilInView(this.parsedPos, context.viewport.from);\n      this.parsedPos = context.viewport.from;\n    }\n    this.moveRangeIndex();\n  }\n  advance() {\n    let context = ParseContext.get();\n    let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n    let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);\n    if (context) end = Math.min(end, context.viewport.to);\n    while (this.parsedPos < end) this.parseLine(context);\n    if (this.chunkStart < this.parsedPos) this.finishChunk();\n    if (this.parsedPos >= parseEnd) return this.finish();\n    if (context && this.parsedPos >= context.viewport.to) {\n      context.skipUntilInView(this.parsedPos, parseEnd);\n      return this.finish();\n    }\n    return null;\n  }\n  stopAt(pos) {\n    this.stoppedAt = pos;\n  }\n  lineAfter(pos) {\n    let chunk = this.input.chunk(pos);\n    if (!this.input.lineChunks) {\n      let eol = chunk.indexOf(\"\\n\");\n      if (eol > -1) chunk = chunk.slice(0, eol);\n    } else if (chunk == \"\\n\") {\n      chunk = \"\";\n    }\n    return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n  }\n  nextLine() {\n    let from = this.parsedPos,\n      line = this.lineAfter(from),\n      end = from + line.length;\n    for (let index = this.rangeIndex;;) {\n      let rangeEnd = this.ranges[index].to;\n      if (rangeEnd >= end) break;\n      line = line.slice(0, rangeEnd - (end - line.length));\n      index++;\n      if (index == this.ranges.length) break;\n      let rangeStart = this.ranges[index].from;\n      let after = this.lineAfter(rangeStart);\n      line += after;\n      end = rangeStart + after.length;\n    }\n    return {\n      line,\n      end\n    };\n  }\n  skipGapsTo(pos, offset, side) {\n    for (;;) {\n      let end = this.ranges[this.rangeIndex].to,\n        offPos = pos + offset;\n      if (side > 0 ? end > offPos : end >= offPos) break;\n      let start = this.ranges[++this.rangeIndex].from;\n      offset += start - end;\n    }\n    return offset;\n  }\n  moveRangeIndex() {\n    while (this.ranges[this.rangeIndex].to < this.parsedPos) this.rangeIndex++;\n  }\n  emitToken(id, from, to, offset) {\n    let size = 4;\n    if (this.ranges.length > 1) {\n      offset = this.skipGapsTo(from, offset, 1);\n      from += offset;\n      let len0 = this.chunk.length;\n      offset = this.skipGapsTo(to, offset, -1);\n      to += offset;\n      size += this.chunk.length - len0;\n    }\n    let last = this.chunk.length - 4;\n    if (this.lang.streamParser.mergeTokens && size == 4 && last >= 0 && this.chunk[last] == id && this.chunk[last + 2] == from) this.chunk[last + 2] = to;else this.chunk.push(id, from, to, size);\n    return offset;\n  }\n  parseLine(context) {\n    let {\n        line,\n        end\n      } = this.nextLine(),\n      offset = 0,\n      {\n        streamParser\n      } = this.lang;\n    let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n    if (stream.eol()) {\n      streamParser.blankLine(this.state, stream.indentUnit);\n    } else {\n      while (!stream.eol()) {\n        let token = readToken(streamParser.token, stream, this.state);\n        if (token) offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, offset);\n        if (stream.start > 10000 /* C.MaxLineLength */) break;\n      }\n    }\n    this.parsedPos = end;\n    this.moveRangeIndex();\n    if (this.parsedPos < this.to) this.parsedPos++;\n  }\n  finishChunk() {\n    let tree = Tree.build({\n      buffer: this.chunk,\n      start: this.chunkStart,\n      length: this.parsedPos - this.chunkStart,\n      nodeSet,\n      topID: 0,\n      maxBufferLength: 2048 /* C.ChunkSize */,\n      reused: this.chunkReused\n    });\n    tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n    this.chunks.push(tree);\n    this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n    this.chunk = [];\n    this.chunkReused = undefined;\n    this.chunkStart = this.parsedPos;\n  }\n  finish() {\n    return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n  }\n}\nfunction readToken(token, stream, state) {\n  stream.start = stream.pos;\n  for (let i = 0; i < 10; i++) {\n    let result = token(stream, state);\n    if (stream.pos > stream.start) return result;\n  }\n  throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\n// Cache of node types by name and tags\nconst byTag = /*@__PURE__*/Object.create(null);\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [[\"variable\", \"variableName\"], [\"variable-2\", \"variableName.special\"], [\"string-2\", \"string.special\"], [\"def\", \"variableName.definition\"], [\"tag\", \"tagName\"], [\"attribute\", \"attributeName\"], [\"type\", \"typeName\"], [\"builtin\", \"variableName.standard\"], [\"qualifier\", \"modifier\"], [\"error\", \"invalid\"], [\"header\", \"heading\"], [\"property\", \"propertyName\"]]) defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n  constructor(extra) {\n    this.extra = extra;\n    this.table = Object.assign(Object.create(null), defaultTable);\n  }\n  resolve(tag) {\n    return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n  }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n  if (warned.indexOf(part) > -1) return;\n  warned.push(part);\n  console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n  let tags$1 = [];\n  for (let name of tagStr.split(\" \")) {\n    let found = [];\n    for (let part of name.split(\".\")) {\n      let value = extra[part] || tags[part];\n      if (!value) {\n        warnForPart(part, `Unknown highlighting tag ${part}`);\n      } else if (typeof value == \"function\") {\n        if (!found.length) warnForPart(part, `Modifier ${part} used at start of tag`);else found = found.map(value);\n      } else {\n        if (found.length) warnForPart(part, `Tag ${part} used as modifier`);else found = Array.isArray(value) ? value : [value];\n      }\n    }\n    for (let tag of found) tags$1.push(tag);\n  }\n  if (!tags$1.length) return 0;\n  let name = tagStr.replace(/ /g, \"_\"),\n    key = name + \" \" + tags$1.map(t => t.id);\n  let known = byTag[key];\n  if (known) return known.id;\n  let type = byTag[key] = NodeType.define({\n    id: typeArray.length,\n    name,\n    props: [styleTags({\n      [name]: tags$1\n    })]\n  });\n  typeArray.push(type);\n  return type.id;\n}\nfunction docID(data, lang) {\n  let type = NodeType.define({\n    id: typeArray.length,\n    name: \"Document\",\n    props: [languageDataProp.add(() => data), indentNodeProp.add(() => cx => lang.getIndent(cx))],\n    top: true\n  });\n  typeArray.push(type);\n  return type;\n}\nfunction buildForLine(line) {\n  return line.length <= 4096 && /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/.test(line);\n}\nfunction textHasRTL(text) {\n  for (let i = text.iter(); !i.next().done;) if (buildForLine(i.value)) return true;\n  return false;\n}\nfunction changeAddsRTL(change) {\n  let added = false;\n  change.iterChanges((fA, tA, fB, tB, ins) => {\n    if (!added && textHasRTL(ins)) added = true;\n  });\n  return added;\n}\nconst alwaysIsolate = /*@__PURE__*/Facet.define({\n  combine: values => values.some(x => x)\n});\n/**\nMake sure nodes\n[marked](https://lezer.codemirror.net/docs/ref/#common.NodeProp^isolate)\nas isolating for bidirectional text are rendered in a way that\nisolates them from the surrounding text.\n*/\nfunction bidiIsolates(options = {}) {\n  let extensions = [isolateMarks];\n  if (options.alwaysIsolate) extensions.push(alwaysIsolate.of(true));\n  return extensions;\n}\nconst isolateMarks = /*@__PURE__*/ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.always = view.state.facet(alwaysIsolate) || view.textDirection != Direction.LTR || view.state.facet(EditorView.perLineTextDirection);\n    this.hasRTL = !this.always && textHasRTL(view.state.doc);\n    this.tree = syntaxTree(view.state);\n    this.decorations = this.always || this.hasRTL ? buildDeco(view, this.tree, this.always) : Decoration.none;\n  }\n  update(update) {\n    let always = update.state.facet(alwaysIsolate) || update.view.textDirection != Direction.LTR || update.state.facet(EditorView.perLineTextDirection);\n    if (!always && !this.hasRTL && changeAddsRTL(update.changes)) this.hasRTL = true;\n    if (!always && !this.hasRTL) return;\n    let tree = syntaxTree(update.state);\n    if (always != this.always || tree != this.tree || update.docChanged || update.viewportChanged) {\n      this.tree = tree;\n      this.always = always;\n      this.decorations = buildDeco(update.view, tree, always);\n    }\n  }\n}, {\n  provide: plugin => {\n    function access(view) {\n      var _a, _b;\n      return (_b = (_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.decorations) !== null && _b !== void 0 ? _b : Decoration.none;\n    }\n    return [EditorView.outerDecorations.of(access), Prec.lowest(EditorView.bidiIsolatedRanges.of(access))];\n  }\n});\nfunction buildDeco(view, tree, always) {\n  let deco = new RangeSetBuilder();\n  let ranges = view.visibleRanges;\n  if (!always) ranges = clipRTLLines(ranges, view.state.doc);\n  for (let {\n    from,\n    to\n  } of ranges) {\n    tree.iterate({\n      enter: node => {\n        let iso = node.type.prop(NodeProp.isolate);\n        if (iso) deco.add(node.from, node.to, marks[iso]);\n      },\n      from,\n      to\n    });\n  }\n  return deco.finish();\n}\nfunction clipRTLLines(ranges, doc) {\n  let cur = doc.iter(),\n    pos = 0,\n    result = [],\n    last = null;\n  for (let {\n    from,\n    to\n  } of ranges) {\n    if (last && last.to > from) {\n      from = last.to;\n      if (from >= to) continue;\n    }\n    if (pos + cur.value.length < from) {\n      cur.next(from - (pos + cur.value.length));\n      pos = from;\n    }\n    for (;;) {\n      let start = pos,\n        end = pos + cur.value.length;\n      if (!cur.lineBreak && buildForLine(cur.value)) {\n        if (last && last.to > start - 10) last.to = Math.min(to, end);else result.push(last = {\n          from: start,\n          to: Math.min(to, end)\n        });\n      }\n      if (end >= to) break;\n      pos = end;\n      cur.next();\n    }\n  }\n  return result;\n}\nconst marks = {\n  rtl: /*@__PURE__*/Decoration.mark({\n    class: \"cm-iso\",\n    inclusive: true,\n    attributes: {\n      dir: \"rtl\"\n    },\n    bidiIsolate: Direction.RTL\n  }),\n  ltr: /*@__PURE__*/Decoration.mark({\n    class: \"cm-iso\",\n    inclusive: true,\n    attributes: {\n      dir: \"ltr\"\n    },\n    bidiIsolate: Direction.LTR\n  }),\n  auto: /*@__PURE__*/Decoration.mark({\n    class: \"cm-iso\",\n    inclusive: true,\n    attributes: {\n      dir: \"auto\"\n    },\n    bidiIsolate: null\n  })\n};\nexport { DocInput, HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bidiIsolates, bracketMatching, bracketMatchingHandle, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, sublanguageProp, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, toggleFold, unfoldAll, unfoldCode, unfoldEffect };","map":{"version":3,"names":["NodeProp","IterMode","Tree","TreeFragment","Parser","NodeType","NodeSet","StateEffect","StateField","Facet","EditorState","countColumn","combineConfig","RangeSet","RangeSetBuilder","Prec","ViewPlugin","logException","EditorView","Decoration","WidgetType","gutter","GutterMarker","Direction","tags","tagHighlighter","highlightTree","styleTags","StyleModule","_a","languageDataProp","defineLanguageFacet","baseData","define","combine","values","concat","undefined","sublanguageProp","Language","constructor","data","parser","extraExtensions","name","prototype","hasOwnProperty","Object","defineProperty","get","syntaxTree","extension","language","of","languageData","state","pos","side","top","topNodeAt","type","prop","base","facet","sub","innerNode","resolve","from","sublang","test","isActiveAt","findRegions","lang","to","doc","length","allowsNesting","result","explore","tree","push","mount","mounted","overlay","r","size","i","children","ch","positions","setState","topLang","topNode","node","enter","ExcludeBuffers","isTop","LRLanguage","spec","configure","props","add","options","hasWrappers","field","empty","ensureSyntaxTree","upto","timeout","parse","context","oldVieport","viewport","updateViewport","isDone","work","syntaxTreeAvailable","forceParsing","view","success","dispatch","syntaxParserRunning","plugin","parseWorker","isWorking","DocInput","cursorPos","string","cursor","iter","syncTo","next","value","chunk","lineChunks","read","stringStart","sliceString","slice","currentContext","ParseContext","fragments","treeLen","skipped","scheduleOn","tempSkipped","create","startParse","until","takeTree","withContext","endTime","Date","now","stoppedAt","stopAt","done","advance","withoutTempSkipped","addTree","parsedPos","f","prev","pop","cutFragments","changes","newState","ranges","iterChangedRanges","fromA","toA","fromB","toB","applyChanges","mapPos","startLen","splice","reset","skipUntilInView","getSkippingParser","createParse","input","cx","Promise","all","none","Math","min","frags","LanguageState","apply","tr","docChanged","newCx","startState","max","init","vpTo","parseState","update","e","effects","is","requestIdle","callback","setTimeout","clearTimeout","requestIdleCallback","idle","cancelIdleCallback","isInputPending","navigator","scheduling","fromClass","ParseWorker","working","workScheduled","chunkEnd","chunkBudget","bind","scheduleWork","selectionSet","hasFocus","checkAsyncSchedule","deadline","timeRemaining","viewportFirst","then","catch","err","destroy","eventHandlers","focus","languages","enables","contentAttributes","compute","LanguageSupport","support","LanguageDescription","alias","extensions","filename","loadFunc","loading","load","RangeError","map","s","toLowerCase","matchFilename","descs","d","ext","exec","indexOf","matchLanguageName","fuzzy","some","a","found","indentService","indentUnit","unit","Array","Error","JSON","stringify","getIndentUnit","charCodeAt","tabSize","indentString","cols","ts","getIndentation","IndentContext","service","syntaxIndentation","indentRange","updated","overrideIndentation","start","line","lineAt","indent","text","cur","norm","insert","bias","simulateBreak","simulateDoubleBreak","textAfterPos","column","override","search","lineIndent","overriden","simulatedBreak","indentNodeProp","ast","stack","resolveStack","inner","resolveInner","enterUnfinishedNodesBefore","parent","indentFor","strategy","indentStrategy","TreeIndentContext","ignoreClosed","first","firstChild","close","closedBy","last","lastChild","closed","delimitedStrategy","topIndent","textAfter","baseIndent","baseIndentFor","atBreak","isParent","continue","bracketedAligned","openToken","childAfter","sim","openLine","lineEnd","isSkipped","space","delimitedIndent","closing","align","units","closedAt","after","match","aligned","flatIndent","continuedIndent","except","matchExcept","DontIndentBeyond","indentOnInput","transactionFilter","isUserEvent","rules","languageDataAt","selection","main","head","newDoc","newSelection","lineStart","sequential","foldService","foldNodeProp","foldInside","isError","syntaxFolding","end","isUnfinished","foldable","mapRange","range","mapping","foldEffect","unfoldEffect","selectedLines","lines","l","lineBlockAt","foldState","folded","clearTouchedFolds","foldExists","preparePlaceholder","foldConfig","widget","foldWidget","replace","PreparedFoldWidget","filter","filterFrom","filterTo","provide","decorations","toJSON","between","fromJSON","isArray","set","touched","b","foldedRanges","findFold","maybeEnable","other","appendConfig","codeFolding","foldCode","announceFold","unfoldCode","fold","lineFrom","number","lineTo","announce","phrase","foldAll","unfoldAll","foldableContainer","lineBlock","foldableRegion","toggleFold","foldRange","foldKeymap","key","mac","run","defaultConfig","placeholderDOM","placeholderText","config","baseTheme$1","widgetToDOM","prepared","conf","onclick","event","posAtDOM","target","preventDefault","element","document","createElement","textContent","setAttribute","title","className","toDOM","eq","foldGutterDefaults","openText","closedText","markerDOM","domEventHandlers","foldingChanged","FoldMarker","open","span","foldGutter","fullConfig","canFold","canUnfold","markers","buildMarkers","viewportChanged","builder","viewportLineBlocks","mark","finish","class","initialSpacer","click","baseTheme","backgroundColor","border","color","borderRadius","margin","padding","HighlightStyle","specs","modSpec","def","cls","newName","scopeOpt","scope","style","tag","assign","module","themeType","highlighterFacet","fallbackHighlighter","getHighlighters","syntaxHighlighting","highlighter","treeHighlighter","styleModule","fallback","computeN","darkTheme","highlightingFor","highlighters","TreeHighlighter","markCache","buildDeco","decoratedTo","styleChange","decoratedToMapped","visibleRanges","high","v","defaultHighlightStyle","meta","link","textDecoration","heading","fontWeight","emphasis","fontStyle","strong","strikethrough","keyword","atom","bool","url","contentSeparator","labelName","literal","inserted","deleted","regexp","escape","special","definition","variableName","local","typeName","namespace","macroName","propertyName","comment","invalid","DefaultScanDist","DefaultBrackets","bracketMatchingConfig","configs","afterCursor","brackets","maxScanDistance","renderMatch","defaultRenderMatch","matchingMark","nonmatchingMark","matched","bracketMatchingState","deco","matchBrackets","bracketMatchingUnique","bracketMatching","bracketMatchingHandle","matchingNodes","dir","byProp","openedBy","index","findHandle","hasHandle","matches","handle","matchMarkedBrackets","matchPlainBrackets","_state","_pos","token","matching","firstToken","depth","childBefore","endHandle","prevSibling","nextSibling","tokenType","startCh","sliceDoc","bracket","startToken","iterRange","distance","basePos","countCol","startIndex","startValue","n","StringStream","overrideIndent","lastColumnPos","lastColumnValue","eol","sol","peek","charAt","eat","ok","RegExp","eatWhile","eatSpace","skipToEnd","skipTo","backUp","indentation","pattern","consume","caseInsensitive","cased","str","substr","current","fullParser","blankLine","copyState","defaultCopyState","tokenTable","noTokens","mergeTokens","val","IndentedFrom","WeakMap","StreamLanguage","p","self","impl","Parse","docID","streamParser","stateAfter","perNode","TokenTable","defaultTokenTable","getIndent","findState","statePos","stream","readToken","off","startPos","before","child","cutTree","inside","findStartInFragments","endPos","editorState","openStart","openEnd","offset","chunks","chunkPos","chunkReused","rangeIndex","chunkStart","moveRangeIndex","parseEnd","parseLine","finishChunk","lineAfter","nextLine","rangeEnd","rangeStart","skipGapsTo","offPos","emitToken","id","len0","build","buffer","nodeSet","topID","maxBufferLength","reused","balance","typeArray","warned","byTag","defaultTable","legacyName","createTokenType","extra","table","warnForPart","part","msg","console","warn","tagStr","tags$1","split","t","known","buildForLine","textHasRTL","changeAddsRTL","change","added","iterChanges","fA","tA","fB","tB","ins","alwaysIsolate","x","bidiIsolates","isolateMarks","always","textDirection","LTR","perLineTextDirection","hasRTL","access","_b","outerDecorations","lowest","bidiIsolatedRanges","clipRTLLines","iterate","iso","isolate","marks","lineBreak","rtl","inclusive","attributes","bidiIsolate","RTL","ltr","auto"],"sources":["C:/Users/Noufel/Documents/Nueva carpeta/frontend/node_modules/@codemirror/language/dist/index.js"],"sourcesContent":["import { NodeProp, IterMode, Tree, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, EditorView, Decoration, WidgetType, gutter, GutterMarker, Direction } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\n\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n    return Facet.define({\n        combine: baseData ? values => values.concat(baseData) : undefined\n    });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/\nconst sublanguageProp = /*@__PURE__*/new NodeProp();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\nclass Language {\n    /**\n    Construct a language object. If you need to invoke this\n    directly, first define a data facet with\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n    to the language's outer syntax node.\n    */\n    constructor(\n    /**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n    used for this language.\n    */\n    data, parser, extraExtensions = [], \n    /**\n    A language name.\n    */\n    name = \"\") {\n        this.data = data;\n        this.name = name;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n            Object.defineProperty(EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\n        this.parser = parser;\n        this.extension = [\n            language.of(this),\n            EditorState.languageData.of((state, pos, side) => {\n                let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);\n                if (!data)\n                    return [];\n                let base = state.facet(data), sub = top.type.prop(sublanguageProp);\n                if (sub) {\n                    let innerNode = top.resolve(pos - top.from, side);\n                    for (let sublang of sub)\n                        if (sublang.test(innerNode, state)) {\n                            let data = state.facet(sublang.facet);\n                            return sublang.type == \"replace\" ? data : data.concat(base);\n                        }\n                }\n                return base;\n            })\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */\n    isActiveAt(state, pos, side = -1) {\n        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n    findRegions(state) {\n        let lang = state.facet(language);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n            return [{ from: 0, to: state.doc.length }];\n        if (!lang || !lang.allowsNesting)\n            return [];\n        let result = [];\n        let explore = (tree, from) => {\n            if (tree.prop(languageDataProp) == this.data) {\n                result.push({ from, to: from + tree.length });\n                return;\n            }\n            let mount = tree.prop(NodeProp.mounted);\n            if (mount) {\n                if (mount.tree.prop(languageDataProp) == this.data) {\n                    if (mount.overlay)\n                        for (let r of mount.overlay)\n                            result.push({ from: r.from + from, to: r.to + from });\n                    else\n                        result.push({ from: from, to: from + tree.length });\n                    return;\n                }\n                else if (mount.overlay) {\n                    let size = result.length;\n                    explore(mount.tree, mount.overlay[0].from + from);\n                    if (result.length > size)\n                        return;\n                }\n            }\n            for (let i = 0; i < tree.children.length; i++) {\n                let ch = tree.children[i];\n                if (ch instanceof Tree)\n                    explore(ch, tree.positions[i] + from);\n            }\n        };\n        explore(syntaxTree(state), 0);\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n    get allowsNesting() { return true; }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction topNodeAt(state, pos, side) {\n    let topLang = state.facet(language), tree = syntaxTree(state).topNode;\n    if (!topLang || topLang.allowsNesting) {\n        for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))\n            if (node.type.isTop)\n                tree = node;\n    }\n    return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n    constructor(data, parser, name) {\n        super(data, parser, [], name);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */\n    static define(spec) {\n        let data = defineLanguageFacet(spec.languageData);\n        return new LRLanguage(data, spec.parser.configure({\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n        }), spec.name);\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser and optionally a new name.\n    */\n    configure(options, name) {\n        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\n    }\n    get allowsNesting() { return this.parser.hasWrappers(); }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\nfunction syntaxTree(state) {\n    let field = state.field(Language.state, false);\n    return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    if (!parse)\n        return null;\n    let oldVieport = parse.viewport;\n    parse.updateViewport({ from: 0, to: upto });\n    let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n    parse.updateViewport(oldVieport);\n    return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of thatâ€”the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n    var _a;\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\n    let success = ensureSyntaxTree(view.state, upto, timeout);\n    if (success != syntaxTree(view.state))\n        view.dispatch({});\n    return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n    var _a;\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/\nclass DocInput {\n    /**\n    Create an input object for the given document.\n    */\n    constructor(doc) {\n        this.doc = doc;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.cursor = doc.iter();\n    }\n    get length() { return this.doc.length; }\n    syncTo(pos) {\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    chunk(pos) {\n        this.syncTo(pos);\n        return this.string;\n    }\n    get lineChunks() { return true; }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos)\n            return this.doc.sliceString(from, to);\n        else\n            return this.string.slice(from - stringStart, to - stringStart);\n    }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n    constructor(parser, \n    /**\n    The current editor state.\n    */\n    state, \n    /**\n    Tree fragments that can be reused by incremental re-parses.\n    */\n    fragments = [], \n    /**\n    @internal\n    */\n    tree, \n    /**\n    @internal\n    */\n    treeLen, \n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport, \n    /**\n    @internal\n    */\n    skipped, \n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn) {\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.treeLen = treeLen;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */\n        this.tempSkipped = [];\n    }\n    /**\n    @internal\n    */\n    static create(parser, state, viewport) {\n        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n    }\n    startParse() {\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n    work(until, upto) {\n        if (upto != null && upto >= this.state.doc.length)\n            upto = undefined;\n        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n            this.takeTree();\n            return true;\n        }\n        return this.withContext(() => {\n            var _a;\n            if (typeof until == \"number\") {\n                let endTime = Date.now() + until;\n                until = () => Date.now() > endTime;\n            }\n            if (!this.parse)\n                this.parse = this.startParse();\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\n                upto < this.state.doc.length)\n                this.parse.stopAt(upto);\n            for (;;) {\n                let done = this.parse.advance();\n                if (done) {\n                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n                    this.tree = done;\n                    this.parse = null;\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\n                        this.parse = this.startParse();\n                    else\n                        return true;\n                }\n                if (until())\n                    return false;\n            }\n        });\n    }\n    /**\n    @internal\n    */\n    takeTree() {\n        let pos, tree;\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\n                this.parse.stopAt(pos);\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\n            this.treeLen = pos;\n            this.tree = tree;\n            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n            this.parse = null;\n        }\n    }\n    withContext(f) {\n        let prev = currentContext;\n        currentContext = this;\n        try {\n            return f();\n        }\n        finally {\n            currentContext = prev;\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for (let r; r = this.tempSkipped.pop();)\n            fragments = cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */\n    changes(changes, newState) {\n        let { fragments, tree, treeLen, viewport, skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n            fragments = TreeFragment.applyChanges(fragments, ranges);\n            tree = Tree.empty;\n            treeLen = 0;\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped) {\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to)\n                        skipped.push({ from, to });\n                }\n            }\n        }\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n    updateViewport(viewport) {\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\n            return false;\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for (let i = 0; i < this.skipped.length; i++) {\n            let { from, to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        if (this.skipped.length >= startLen)\n            return false;\n        this.reset();\n        return true;\n    }\n    /**\n    @internal\n    */\n    reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n    skipUntilInView(from, to) {\n        this.skipped.push({ from, to });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n    static getSkippingParser(until) {\n        return new class extends Parser {\n            createParse(input, fragments, ranges) {\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n                let parser = {\n                    parsedPos: from,\n                    advance() {\n                        let cx = currentContext;\n                        if (cx) {\n                            for (let r of ranges)\n                                cx.tempSkipped.push(r);\n                            if (until)\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                        }\n                        this.parsedPos = to;\n                        return new Tree(NodeType.none, [], [], to - from);\n                    },\n                    stoppedAt: null,\n                    stopAt() { }\n                };\n                return parser;\n            }\n        };\n    }\n    /**\n    @internal\n    */\n    isDone(upto) {\n        upto = Math.min(upto, this.state.doc.length);\n        let frags = this.fragments;\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n    static get() { return currentContext; }\n}\nfunction cutFragments(fragments, from, to) {\n    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\n}\nclass LanguageState {\n    constructor(\n    // A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context) {\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged && this.tree == this.context.tree)\n            return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n        if (!newCx.work(20 /* Work.Apply */, upto))\n            newCx.takeTree();\n        return new LanguageState(newCx);\n    }\n    static init(state) {\n        let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);\n        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });\n        if (!parseState.work(20 /* Work.Apply */, vpTo))\n            parseState.takeTree();\n        return new LanguageState(parseState);\n    }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n    create: LanguageState.init,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(Language.setState))\n                return e.value;\n        if (tr.startState.facet(language) != tr.state.facet(language))\n            return LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet requestIdle = (callback) => {\n    let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);\n    return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\")\n    requestIdle = (callback) => {\n        let idle = -1, timeout = setTimeout(() => {\n            idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });\n        }, 100 /* Work.MinPause */);\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n    };\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\n    ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n    constructor(view) {\n        this.view = view;\n        this.working = null;\n        this.workScheduled = 0;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field(Language.state).context;\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\n            this.scheduleWork();\n        if (update.docChanged || update.selectionSet) {\n            if (this.view.hasFocus)\n                this.chunkBudget += 50 /* Work.ChangeBonus */;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork() {\n        if (this.working)\n            return;\n        let { state } = this.view, field = state.field(Language.state);\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\n            this.working = requestIdle(this.work);\n    }\n    work(deadline) {\n        this.working = null;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\n            this.chunkEnd = now + 30000 /* Work.ChunkTime */;\n            this.chunkBudget = 3000 /* Work.ChunkBudget */;\n        }\n        if (this.chunkBudget <= 0)\n            return; // No more budget\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))\n            return;\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n        let done = field.context.work(() => {\n            return isInputPending && isInputPending() || Date.now() > endTime;\n        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0) {\n            field.context.takeTree();\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\n        }\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\n            this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            this.workScheduled++;\n            cx.scheduleOn\n                .then(() => this.scheduleWork())\n                .catch(err => logException(this.view.state, err))\n                .then(() => this.workScheduled--);\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working)\n            this.working();\n    }\n    isWorking() {\n        return !!(this.working || this.workScheduled > 0);\n    }\n}, {\n    eventHandlers: { focus() { this.scheduleWork(); } }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n    combine(languages) { return languages.length ? languages[0] : null; },\n    enables: language => [\n        Language.state,\n        parseWorker,\n        EditorView.contentAttributes.compute([language], state => {\n            let lang = state.facet(language);\n            return lang && lang.name ? { \"data-language\": lang.name } : {};\n        })\n    ]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n    /**\n    Create a language support object.\n    */\n    constructor(\n    /**\n    The language object.\n    */\n    language, \n    /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */\n    support = []) {\n        this.language = language;\n        this.support = support;\n        this.extension = [language, support];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n    constructor(\n    /**\n    The name of this language.\n    */\n    name, \n    /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */\n    alias, \n    /**\n    File extensions associated with this language.\n    */\n    extensions, \n    /**\n    Optional filename pattern that should be associated with this\n    language.\n    */\n    filename, loadFunc, \n    /**\n    If the language has been loaded, this will hold its value.\n    */\n    support = undefined) {\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        this.support = support;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */\n    load() {\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\n    }\n    /**\n    Create a language description.\n    */\n    static of(spec) {\n        let { load, support } = spec;\n        if (!load) {\n            if (!support)\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n            load = () => Promise.resolve(support);\n        }\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n    static matchFilename(descs, filename) {\n        for (let d of descs)\n            if (d.filename && d.filename.test(filename))\n                return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext)\n            for (let d of descs)\n                if (d.extensions.indexOf(ext[1]) > -1)\n                    return d;\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n    static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)\n            if (d.alias.some(a => a == name))\n                return d;\n        if (fuzzy)\n            for (let d of descs)\n                for (let a of d.alias) {\n                    let found = name.indexOf(a);\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\n                        return d;\n                }\n        return null;\n    }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting entirely of the same whitespace character.\nWhen not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n    combine: values => {\n        if (!values.length)\n            return \"  \";\n        let unit = values[0];\n        if (!unit || /\\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return unit;\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n    let unit = state.facet(indentUnit);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n    let result = \"\", ts = state.tabSize, ch = state.facet(indentUnit)[0];\n    if (ch == \"\\t\") {\n        while (cols >= ts) {\n            result += \"\\t\";\n            cols -= ts;\n        }\n        ch = \" \";\n    }\n    for (let i = 0; i < cols; i++)\n        result += ch;\n    return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/\nfunction getIndentation(context, pos) {\n    if (context instanceof EditorState)\n        context = new IndentContext(context);\n    for (let service of context.state.facet(indentService)) {\n        let result = service(context, pos);\n        if (result !== undefined)\n            return result;\n    }\n    let tree = syntaxTree(context.state);\n    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\nfunction indentRange(state, from, to) {\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => { var _a; return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1; } });\n    let changes = [];\n    for (let pos = from; pos <= to;) {\n        let line = state.doc.lineAt(pos);\n        pos = line.to + 1;\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            continue;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    }\n    return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n    /**\n    Create an indent context.\n    */\n    constructor(\n    /**\n    The editor state.\n    */\n    state, \n    /**\n    @internal\n    */\n    options = {}) {\n        this.state = state;\n        this.options = options;\n        this.unit = getIndentUnit(state);\n    }\n    /**\n    Get a description of the line at the given position, taking\n    [simulated line\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    into account. If there is such a break at `pos`, the `bias`\n    argument determines whether the part of the line line before or\n    after the break is used.\n    */\n    lineAt(pos, bias = 1) {\n        let line = this.state.doc.lineAt(pos);\n        let { simulateBreak, simulateDoubleBreak } = this.options;\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n            if (simulateDoubleBreak && simulateBreak == pos)\n                return { text: \"\", from: pos };\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\n            else\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\n        }\n        return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    textAfterPos(pos, bias = 1) {\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\n            return \"\";\n        let { text, from } = this.lineAt(pos, bias);\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n    column(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let result = this.countColumn(text, pos - from);\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n        if (override > -1)\n            result += override - this.countColumn(text, text.search(/\\S|$/));\n        return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n    countColumn(line, pos = line.length) {\n        return countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n    lineIndent(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let override = this.options.overrideIndentation;\n        if (override) {\n            let overriden = override(from);\n            if (overriden > -1)\n                return overriden;\n        }\n        return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n    get simulatedBreak() {\n        return this.options.simulateBreak || null;\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n    let stack = ast.resolveStack(pos);\n    let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);\n    if (inner != stack.node) {\n        let add = [];\n        for (let cur = inner; cur && !(cur.from < stack.node.from || cur.to > stack.node.to ||\n            cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent)\n            add.push(cur);\n        for (let i = add.length - 1; i >= 0; i--)\n            stack = { node: add[i], next: stack };\n    }\n    return indentFor(stack, cx, pos);\n}\nfunction indentFor(stack, cx, pos) {\n    for (let cur = stack; cur; cur = cur.next) {\n        let strategy = indentStrategy(cur.node);\n        if (strategy)\n            return strategy(TreeIndentContext.create(cx, pos, cur));\n    }\n    return 0;\n}\nfunction ignoreClosed(cx) {\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n    let strategy = tree.type.prop(indentNodeProp);\n    if (strategy)\n        return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop(NodeProp.closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? topIndent : null;\n}\nfunction topIndent() { return 0; }\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\nclass TreeIndentContext extends IndentContext {\n    constructor(base, \n    /**\n    The position at which indentation is being computed.\n    */\n    pos, \n    /**\n    @internal\n    */\n    context) {\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.context = context;\n    }\n    /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */\n    get node() { return this.context.node; }\n    /**\n    @internal\n    */\n    static create(base, pos, context) {\n        return new TreeIndentContext(base, pos, context);\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n    get baseIndent() {\n        return this.baseIndentFor(this.node);\n    }\n    /**\n    Get the indentation for the reference line of the given node\n    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n    */\n    baseIndentFor(node) {\n        let line = this.state.doc.lineAt(node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for (;;) {\n            let atBreak = node.resolve(line.from);\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\n                atBreak = atBreak.parent;\n            if (isParent(atBreak, node))\n                break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    continue() {\n        return indentFor(this.context.next, this.base, this.pos);\n    }\n}\nfunction isParent(parent, of) {\n    for (let cur = of; cur; cur = cur.parent)\n        if (parent == cur)\n            return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken)\n        return null;\n    let sim = context.options.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for (let pos = openToken.to;;) {\n        let next = tree.childAfter(pos);\n        if (!next || next == last)\n            return null;\n        if (!next.type.isSkipped) {\n            if (next.from >= lineEnd)\n                return null;\n            let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;\n            return { from: openToken.from, to: openToken.to + space };\n        }\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\n    return (context) => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? bracketedAligned(context) : null;\n    if (aligned)\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = (context) => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({ except, units = 1 } = {}) {\n    return (context) => {\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n    return EditorState.transactionFilter.of(tr => {\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\n            return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length)\n            return tr;\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + DontIndentBeyond)\n            return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some(r => r.test(lineStart)))\n            return tr;\n        let { state } = tr, last = -1, changes = [];\n        for (let { head } of state.selection.ranges) {\n            let line = state.doc.lineAt(head);\n            if (line.from == last)\n                continue;\n            last = line.from;\n            let indent = getIndentation(state, line.from);\n            if (indent == null)\n                continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = indentString(state, indent);\n            if (cur != norm)\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\n    });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\n}\nfunction syntaxFolding(state, start, end) {\n    let tree = syntaxTree(state);\n    if (tree.length < end)\n        return null;\n    let stack = tree.resolveStack(end, 1);\n    let found = null;\n    for (let iter = stack; iter; iter = iter.next) {\n        let cur = iter.node;\n        if (cur.to <= end || cur.from > end)\n            continue;\n        if (found && cur.from < start)\n            break;\n        let prop = cur.type.prop(foldNodeProp);\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end)\n                found = value;\n        }\n    }\n    return found;\n}\nfunction isUnfinished(node) {\n    let ch = node.lastChild;\n    return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n    for (let service of state.facet(foldService)) {\n        let result = service(state, lineStart, lineEnd);\n        if (result)\n            return result;\n    }\n    return syntaxFolding(state, lineStart, lineEnd);\n}\nfunction mapRange(range, mapping) {\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\n    return from >= to ? undefined : { from, to };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstancesâ€”usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\nconst foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\n/**\nState effect that unfolds the given range (if it was folded).\n*/\nconst unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\nfunction selectedLines(view) {\n    let lines = [];\n    for (let { head } of view.state.selection.ranges) {\n        if (lines.some(l => l.from <= head && l.to >= head))\n            continue;\n        lines.push(view.lineBlockAt(head));\n    }\n    return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\nconst foldState = /*@__PURE__*/StateField.define({\n    create() {\n        return Decoration.none;\n    },\n    update(folded, tr) {\n        if (tr.isUserEvent(\"delete\"))\n            tr.changes.iterChangedRanges((fromA, toA) => folded = clearTouchedFolds(folded, fromA, toA));\n        folded = folded.map(tr.changes);\n        for (let e of tr.effects) {\n            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {\n                let { preparePlaceholder } = tr.state.facet(foldConfig);\n                let widget = !preparePlaceholder ? foldWidget :\n                    Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });\n                folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });\n            }\n            else if (e.is(unfoldEffect)) {\n                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,\n                    filterFrom: e.value.from, filterTo: e.value.to });\n            }\n        }\n        // Clear folded ranges that cover the selection head\n        if (tr.selection)\n            folded = clearTouchedFolds(folded, tr.selection.main.head);\n        return folded;\n    },\n    provide: f => EditorView.decorations.from(f),\n    toJSON(folded, state) {\n        let ranges = [];\n        folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });\n        return ranges;\n    },\n    fromJSON(value) {\n        if (!Array.isArray(value) || value.length % 2)\n            throw new RangeError(\"Invalid JSON for fold state\");\n        let ranges = [];\n        for (let i = 0; i < value.length;) {\n            let from = value[i++], to = value[i++];\n            if (typeof from != \"number\" || typeof to != \"number\")\n                throw new RangeError(\"Invalid JSON for fold state\");\n            ranges.push(foldWidget.range(from, to));\n        }\n        return Decoration.set(ranges, true);\n    }\n});\nfunction clearTouchedFolds(folded, from, to = from) {\n    let touched = false;\n    folded.between(from, to, (a, b) => { if (a < to && b > from)\n        touched = true; });\n    return !touched ? folded : folded.update({\n        filterFrom: from,\n        filterTo: to,\n        filter: (a, b) => a >= to || b <= from\n    });\n}\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\nfunction foldedRanges(state) {\n    return state.field(foldState, false) || RangeSet.empty;\n}\nfunction findFold(state, from, to) {\n    var _a;\n    let found = null;\n    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\n        if (!found || found.from > from)\n            found = { from, to };\n    });\n    return found;\n}\nfunction foldExists(folded, from, to) {\n    let found = false;\n    folded.between(from, from, (a, b) => { if (a == from && b == to)\n        found = true; });\n    return found;\n}\nfunction maybeEnable(state, other) {\n    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\nconst foldCode = view => {\n    for (let line of selectedLines(view)) {\n        let range = foldable(view.state, line.from, line.to);\n        if (range) {\n            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });\n            return true;\n        }\n    }\n    return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\nconst unfoldCode = view => {\n    if (!view.state.field(foldState, false))\n        return false;\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    }\n    if (effects.length)\n        view.dispatch({ effects });\n    return effects.length > 0;\n};\nfunction announceFold(view, range, fold = true) {\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\n    return EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\nconst foldAll = view => {\n    let { state } = view, effects = [];\n    for (let pos = 0; pos < state.doc.length;) {\n        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);\n        if (range)\n            effects.push(foldEffect.of(range));\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n    }\n    if (effects.length)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\nconst unfoldAll = view => {\n    let field = view.state.field(foldState, false);\n    if (!field || !field.size)\n        return false;\n    let effects = [];\n    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });\n    view.dispatch({ effects });\n    return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction foldableContainer(view, lineBlock) {\n    // Look backwards through line blocks until we find a foldable region that\n    // intersects with the line\n    for (let line = lineBlock;;) {\n        let foldableRegion = foldable(view.state, line.from, line.to);\n        if (foldableRegion && foldableRegion.to > lineBlock.from)\n            return foldableRegion;\n        if (!line.from)\n            return null;\n        line = view.lineBlockAt(line.from - 1);\n    }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/\nconst toggleFold = (view) => {\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded) {\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n        }\n        else {\n            let foldRange = foldableContainer(view, line);\n            if (foldRange)\n                effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));\n        }\n    }\n    if (effects.length > 0)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\nconst foldKeymap = [\n    { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\n    { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\n    { key: \"Ctrl-Alt-[\", run: foldAll },\n    { key: \"Ctrl-Alt-]\", run: unfoldAll }\n];\nconst defaultConfig = {\n    placeholderDOM: null,\n    preparePlaceholder: null,\n    placeholderText: \"â€¦\"\n};\nconst foldConfig = /*@__PURE__*/Facet.define({\n    combine(values) { return combineConfig(values, defaultConfig); }\n});\n/**\nCreate an extension that configures code folding.\n*/\nfunction codeFolding(config) {\n    let result = [foldState, baseTheme$1];\n    if (config)\n        result.push(foldConfig.of(config));\n    return result;\n}\nfunction widgetToDOM(view, prepared) {\n    let { state } = view, conf = state.facet(foldConfig);\n    let onclick = (event) => {\n        let line = view.lineBlockAt(view.posAtDOM(event.target));\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            view.dispatch({ effects: unfoldEffect.of(folded) });\n        event.preventDefault();\n    };\n    if (conf.placeholderDOM)\n        return conf.placeholderDOM(view, onclick, prepared);\n    let element = document.createElement(\"span\");\n    element.textContent = conf.placeholderText;\n    element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n    element.title = state.phrase(\"unfold\");\n    element.className = \"cm-foldPlaceholder\";\n    element.onclick = onclick;\n    return element;\n}\nconst foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM(view) { return widgetToDOM(view, null); }\n    } });\nclass PreparedFoldWidget extends WidgetType {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    eq(other) { return this.value == other.value; }\n    toDOM(view) { return widgetToDOM(view, this.value); }\n}\nconst foldGutterDefaults = {\n    openText: \"âŒ„\",\n    closedText: \"â€º\",\n    markerDOM: null,\n    domEventHandlers: {},\n    foldingChanged: () => false\n};\nclass FoldMarker extends GutterMarker {\n    constructor(config, open) {\n        super();\n        this.config = config;\n        this.open = open;\n    }\n    eq(other) { return this.config == other.config && this.open == other.open; }\n    toDOM(view) {\n        if (this.config.markerDOM)\n            return this.config.markerDOM(this.open);\n        let span = document.createElement(\"span\");\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n        return span;\n    }\n}\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\nfunction foldGutter(config = {}) {\n    let fullConfig = { ...foldGutterDefaults, ...config };\n    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);\n    let markers = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.from = view.viewport.from;\n            this.markers = this.buildMarkers(view);\n        }\n        update(update) {\n            if (update.docChanged || update.viewportChanged ||\n                update.startState.facet(language) != update.state.facet(language) ||\n                update.startState.field(foldState, false) != update.state.field(foldState, false) ||\n                syntaxTree(update.startState) != syntaxTree(update.state) ||\n                fullConfig.foldingChanged(update))\n                this.markers = this.buildMarkers(update.view);\n        }\n        buildMarkers(view) {\n            let builder = new RangeSetBuilder();\n            for (let line of view.viewportLineBlocks) {\n                let mark = findFold(view.state, line.from, line.to) ? canUnfold\n                    : foldable(view.state, line.from, line.to) ? canFold : null;\n                if (mark)\n                    builder.add(line.from, line.from, mark);\n            }\n            return builder.finish();\n        }\n    });\n    let { domEventHandlers } = fullConfig;\n    return [\n        markers,\n        gutter({\n            class: \"cm-foldGutter\",\n            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },\n            initialSpacer() {\n                return new FoldMarker(fullConfig, false);\n            },\n            domEventHandlers: {\n                ...domEventHandlers,\n                click: (view, line, event) => {\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))\n                        return true;\n                    let folded = findFold(view.state, line.from, line.to);\n                    if (folded) {\n                        view.dispatch({ effects: unfoldEffect.of(folded) });\n                        return true;\n                    }\n                    let range = foldable(view.state, line.from, line.to);\n                    if (range) {\n                        view.dispatch({ effects: foldEffect.of(range) });\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        }),\n        codeFolding()\n    ];\n}\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-foldPlaceholder\": {\n        backgroundColor: \"#eee\",\n        border: \"1px solid #ddd\",\n        color: \"#888\",\n        borderRadius: \".2em\",\n        margin: \"0 1px\",\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    },\n    \".cm-foldGutter span\": {\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    }\n});\n\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\nclass HighlightStyle {\n    constructor(\n    /**\n    The tag styles used to create this highlight style.\n    */\n    specs, options) {\n        this.specs = specs;\n        let modSpec;\n        function def(spec) {\n            let cls = StyleModule.newName();\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n            return cls;\n        }\n        const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n        const scopeOpt = options.scope;\n        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data\n            : scopeOpt ? (type) => type == scopeOpt : undefined;\n        this.style = tagHighlighter(specs.map(style => ({\n            tag: style.tag,\n            class: style.class || def(Object.assign({}, style, { tag: null }))\n        })), {\n            all,\n        }).style;\n        this.module = modSpec ? new StyleModule(modSpec) : null;\n        this.themeType = options.themeType;\n    }\n    /**\n    Create a highlighter style that associates the given styles to\n    the given tags. The specs must be objects that hold a style tag\n    or array of tags in their `tag` property, and either a single\n    `class` property providing a static CSS class (for highlighter\n    that rely on external styling), or a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    set of CSS properties (which define the styling for those tags).\n    \n    The CSS rules created for a highlighter will be emitted in the\n    order of the spec's properties. That means that for elements that\n    have multiple tags associated with them, styles defined further\n    down in the list will have a higher CSS precedence than styles\n    defined earlier.\n    */\n    static define(specs, options) {\n        return new HighlightStyle(specs, options || {});\n    }\n}\nconst highlighterFacet = /*@__PURE__*/Facet.define();\nconst fallbackHighlighter = /*@__PURE__*/Facet.define({\n    combine(values) { return values.length ? [values[0]] : null; }\n});\nfunction getHighlighters(state) {\n    let main = state.facet(highlighterFacet);\n    return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\nfunction syntaxHighlighting(highlighter, options) {\n    let ext = [treeHighlighter], themeType;\n    if (highlighter instanceof HighlightStyle) {\n        if (highlighter.module)\n            ext.push(EditorView.styleModule.of(highlighter.module));\n        themeType = highlighter.themeType;\n    }\n    if (options === null || options === void 0 ? void 0 : options.fallback)\n        ext.push(fallbackHighlighter.of(highlighter));\n    else if (themeType)\n        ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {\n            return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n        }));\n    else\n        ext.push(highlighterFacet.of(highlighter));\n    return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\nfunction highlightingFor(state, tags, scope) {\n    let highlighters = getHighlighters(state);\n    let result = null;\n    if (highlighters)\n        for (let highlighter of highlighters) {\n            if (!highlighter.scope || scope && highlighter.scope(scope)) {\n                let cls = highlighter.style(tags);\n                if (cls)\n                    result = result ? result + \" \" + cls : cls;\n            }\n        }\n    return result;\n}\nclass TreeHighlighter {\n    constructor(view) {\n        this.markCache = Object.create(null);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.buildDeco(view, getHighlighters(view.state));\n        this.decoratedTo = view.viewport.to;\n    }\n    update(update) {\n        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);\n        let styleChange = highlighters != getHighlighters(update.startState);\n        let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);\n        if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {\n            this.decorations = this.decorations.map(update.changes);\n            this.decoratedTo = decoratedToMapped;\n        }\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\n            this.tree = tree;\n            this.decorations = this.buildDeco(update.view, highlighters);\n            this.decoratedTo = viewport.to;\n        }\n    }\n    buildDeco(view, highlighters) {\n        if (!highlighters || !this.tree.length)\n            return Decoration.none;\n        let builder = new RangeSetBuilder();\n        for (let { from, to } of view.visibleRanges) {\n            highlightTree(this.tree, highlighters, (from, to, style) => {\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));\n            }, from, to);\n        }\n        return builder.finish();\n    }\n}\nconst treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n    decorations: v => v.decorations\n}));\n/**\nA default highlight style (works well with light themes).\n*/\nconst defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([\n    { tag: tags.meta,\n        color: \"#404740\" },\n    { tag: tags.link,\n        textDecoration: \"underline\" },\n    { tag: tags.heading,\n        textDecoration: \"underline\",\n        fontWeight: \"bold\" },\n    { tag: tags.emphasis,\n        fontStyle: \"italic\" },\n    { tag: tags.strong,\n        fontWeight: \"bold\" },\n    { tag: tags.strikethrough,\n        textDecoration: \"line-through\" },\n    { tag: tags.keyword,\n        color: \"#708\" },\n    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n        color: \"#219\" },\n    { tag: [tags.literal, tags.inserted],\n        color: \"#164\" },\n    { tag: [tags.string, tags.deleted],\n        color: \"#a11\" },\n    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n        color: \"#e40\" },\n    { tag: /*@__PURE__*/tags.definition(tags.variableName),\n        color: \"#00f\" },\n    { tag: /*@__PURE__*/tags.local(tags.variableName),\n        color: \"#30a\" },\n    { tag: [tags.typeName, tags.namespace],\n        color: \"#085\" },\n    { tag: tags.className,\n        color: \"#167\" },\n    { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n        color: \"#256\" },\n    { tag: /*@__PURE__*/tags.definition(tags.propertyName),\n        color: \"#00c\" },\n    { tag: tags.comment,\n        color: \"#940\" },\n    { tag: tags.invalid,\n        color: \"#f00\" }\n]);\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\n    \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\n});\nconst DefaultScanDist = 10000, DefaultBrackets = \"()[]{}\";\nconst bracketMatchingConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            afterCursor: true,\n            brackets: DefaultBrackets,\n            maxScanDistance: DefaultScanDist,\n            renderMatch: defaultRenderMatch\n        });\n    }\n});\nconst matchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-matchingBracket\" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-nonmatchingBracket\" });\nfunction defaultRenderMatch(match) {\n    let decorations = [];\n    let mark = match.matched ? matchingMark : nonmatchingMark;\n    decorations.push(mark.range(match.start.from, match.start.to));\n    if (match.end)\n        decorations.push(mark.range(match.end.from, match.end.to));\n    return decorations;\n}\nconst bracketMatchingState = /*@__PURE__*/StateField.define({\n    create() { return Decoration.none; },\n    update(deco, tr) {\n        if (!tr.docChanged && !tr.selection)\n            return deco;\n        let decorations = [];\n        let config = tr.state.facet(bracketMatchingConfig);\n        for (let range of tr.state.selection.ranges) {\n            if (!range.empty)\n                continue;\n            let match = matchBrackets(tr.state, range.head, -1, config)\n                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))\n                || (config.afterCursor &&\n                    (matchBrackets(tr.state, range.head, 1, config) ||\n                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));\n            if (match)\n                decorations = decorations.concat(config.renderMatch(match, tr.state));\n        }\n        return Decoration.set(decorations, true);\n    },\n    provide: f => EditorView.decorations.from(f)\n});\nconst bracketMatchingUnique = [\n    bracketMatchingState,\n    baseTheme\n];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\nfunction bracketMatching(config = {}) {\n    return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a â€˜handleâ€™â€”the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/\nconst bracketMatchingHandle = /*@__PURE__*/new NodeProp();\nfunction matchingNodes(node, dir, brackets) {\n    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n    if (byProp)\n        return byProp;\n    if (node.name.length == 1) {\n        let index = brackets.indexOf(node.name);\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))\n            return [brackets[index + dir]];\n    }\n    return null;\n}\nfunction findHandle(node) {\n    let hasHandle = node.type.prop(bracketMatchingHandle);\n    return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\nfunction matchBrackets(state, pos, dir, config = {}) {\n    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;\n    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);\n    for (let cur = node; cur; cur = cur.parent) {\n        let matches = matchingNodes(cur.type, dir, brackets);\n        if (matches && cur.from < cur.to) {\n            let handle = findHandle(cur);\n            if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))\n                return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n        }\n    }\n    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))\n        do {\n            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n                    let endHandle = findHandle(cursor);\n                    return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };\n                }\n                else if (matchingNodes(cursor.type, dir, brackets)) {\n                    depth++;\n                }\n                else if (matchingNodes(cursor.type, -dir, brackets)) {\n                    if (depth == 0) {\n                        let endHandle = findHandle(cursor);\n                        return {\n                            start: firstToken,\n                            end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,\n                            matched: false\n                        };\n                    }\n                    depth--;\n                }\n            }\n        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n    return { start: firstToken, matched: false };\n}\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n    let bracket = brackets.indexOf(startCh);\n    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))\n        return null;\n    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\n    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {\n        let text = iter.value;\n        if (dir < 0)\n            distance += text.length;\n        let basePos = pos + distance * dir;\n        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\n            let found = brackets.indexOf(text[pos]);\n            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)\n                continue;\n            if ((found % 2 == 0) == (dir > 0)) {\n                depth++;\n            }\n            else if (depth == 1) { // Closing\n                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };\n            }\n            else {\n                depth--;\n            }\n        }\n        if (dir > 0)\n            distance += text.length;\n    }\n    return iter.done ? { start: startToken, matched: false } : null;\n}\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    Create a stream.\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit, overrideIndent) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        this.overrideIndent = overrideIndent;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        var _a;\n        return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        name: spec.name || \"\",\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens,\n        mergeTokens: spec.mergeTokens !== false\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\nconst IndentedFrom = /*@__PURE__*/new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, [], parser.name);\n        this.topNode = docID(data, this);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    /**\n    Define a stream language.\n    */\n    static define(spec) { return new StreamLanguage(spec); }\n    /**\n    @internal\n    */\n    getIndent(cx) {\n        let from = undefined;\n        let { overrideIndentation } = cx.options;\n        if (overrideIndentation) {\n            from = IndentedFrom.get(cx.state);\n            if (from != null && from < cx.pos - 1e4)\n                from = undefined;\n        }\n        let start = findState(this, cx.node.tree, cx.node.from, cx.node.from, from !== null && from !== void 0 ? from : cx.pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = cx.node.from;\n        }\n        if (cx.pos - statePos > 10000 /* C.MaxIndentScanDist */)\n            return null;\n        while (statePos < cx.pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(cx.pos, line.to);\n            if (line.length) {\n                let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == cx.pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let line = cx.lineAt(cx.pos);\n        if (overrideIndentation && from == null)\n            IndentedFrom.set(cx.state, line.from);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && from == 0 && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, endPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && found.pos <= endPos && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, this.to, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for (let i = 0; i < tree.children.length; i++) {\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */ &&\n            ranges.some(r => r.from <= context.viewport.from && r.to >= context.viewport.from)) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n        this.moveRangeIndex();\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    moveRangeIndex() {\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\n            this.rangeIndex++;\n    }\n    emitToken(id, from, to, offset) {\n        let size = 4;\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        let last = this.chunk.length - 4;\n        if (this.lang.streamParser.mergeTokens && size == 4 && last >= 0 &&\n            this.chunk[last] == id && this.chunk[last + 2] == from)\n            this.chunk[last + 2] = to;\n        else\n            this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, offset);\n                if (stream.start > 10000 /* C.MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        this.moveRangeIndex();\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* C.ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\n// Cache of node types by name and tags\nconst byTag = /*@__PURE__*/Object.create(null);\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"tagName\"],\n    [\"attribute\", \"attributeName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tags$1 = [];\n    for (let name of tagStr.split(\" \")) {\n        let found = [];\n        for (let part of name.split(\".\")) {\n            let value = (extra[part] || tags[part]);\n            if (!value) {\n                warnForPart(part, `Unknown highlighting tag ${part}`);\n            }\n            else if (typeof value == \"function\") {\n                if (!found.length)\n                    warnForPart(part, `Modifier ${part} used at start of tag`);\n                else\n                    found = found.map(value);\n            }\n            else {\n                if (found.length)\n                    warnForPart(part, `Tag ${part} used as modifier`);\n                else\n                    found = Array.isArray(value) ? value : [value];\n            }\n        }\n        for (let tag of found)\n            tags$1.push(tag);\n    }\n    if (!tags$1.length)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), key = name + \" \" + tags$1.map(t => t.id);\n    let known = byTag[key];\n    if (known)\n        return known.id;\n    let type = byTag[key] = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tags$1 })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data, lang) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [\n            languageDataProp.add(() => data),\n            indentNodeProp.add(() => cx => lang.getIndent(cx))\n        ], top: true });\n    typeArray.push(type);\n    return type;\n}\n\nfunction buildForLine(line) {\n    return line.length <= 4096 && /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/.test(line);\n}\nfunction textHasRTL(text) {\n    for (let i = text.iter(); !i.next().done;)\n        if (buildForLine(i.value))\n            return true;\n    return false;\n}\nfunction changeAddsRTL(change) {\n    let added = false;\n    change.iterChanges((fA, tA, fB, tB, ins) => {\n        if (!added && textHasRTL(ins))\n            added = true;\n    });\n    return added;\n}\nconst alwaysIsolate = /*@__PURE__*/Facet.define({ combine: values => values.some(x => x) });\n/**\nMake sure nodes\n[marked](https://lezer.codemirror.net/docs/ref/#common.NodeProp^isolate)\nas isolating for bidirectional text are rendered in a way that\nisolates them from the surrounding text.\n*/\nfunction bidiIsolates(options = {}) {\n    let extensions = [isolateMarks];\n    if (options.alwaysIsolate)\n        extensions.push(alwaysIsolate.of(true));\n    return extensions;\n}\nconst isolateMarks = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.always = view.state.facet(alwaysIsolate) ||\n            view.textDirection != Direction.LTR ||\n            view.state.facet(EditorView.perLineTextDirection);\n        this.hasRTL = !this.always && textHasRTL(view.state.doc);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.always || this.hasRTL ? buildDeco(view, this.tree, this.always) : Decoration.none;\n    }\n    update(update) {\n        let always = update.state.facet(alwaysIsolate) ||\n            update.view.textDirection != Direction.LTR ||\n            update.state.facet(EditorView.perLineTextDirection);\n        if (!always && !this.hasRTL && changeAddsRTL(update.changes))\n            this.hasRTL = true;\n        if (!always && !this.hasRTL)\n            return;\n        let tree = syntaxTree(update.state);\n        if (always != this.always || tree != this.tree || update.docChanged || update.viewportChanged) {\n            this.tree = tree;\n            this.always = always;\n            this.decorations = buildDeco(update.view, tree, always);\n        }\n    }\n}, {\n    provide: plugin => {\n        function access(view) {\n            var _a, _b;\n            return (_b = (_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.decorations) !== null && _b !== void 0 ? _b : Decoration.none;\n        }\n        return [EditorView.outerDecorations.of(access),\n            Prec.lowest(EditorView.bidiIsolatedRanges.of(access))];\n    }\n});\nfunction buildDeco(view, tree, always) {\n    let deco = new RangeSetBuilder();\n    let ranges = view.visibleRanges;\n    if (!always)\n        ranges = clipRTLLines(ranges, view.state.doc);\n    for (let { from, to } of ranges) {\n        tree.iterate({\n            enter: node => {\n                let iso = node.type.prop(NodeProp.isolate);\n                if (iso)\n                    deco.add(node.from, node.to, marks[iso]);\n            },\n            from, to\n        });\n    }\n    return deco.finish();\n}\nfunction clipRTLLines(ranges, doc) {\n    let cur = doc.iter(), pos = 0, result = [], last = null;\n    for (let { from, to } of ranges) {\n        if (last && last.to > from) {\n            from = last.to;\n            if (from >= to)\n                continue;\n        }\n        if (pos + cur.value.length < from) {\n            cur.next(from - (pos + cur.value.length));\n            pos = from;\n        }\n        for (;;) {\n            let start = pos, end = pos + cur.value.length;\n            if (!cur.lineBreak && buildForLine(cur.value)) {\n                if (last && last.to > start - 10)\n                    last.to = Math.min(to, end);\n                else\n                    result.push(last = { from: start, to: Math.min(to, end) });\n            }\n            if (end >= to)\n                break;\n            pos = end;\n            cur.next();\n        }\n    }\n    return result;\n}\nconst marks = {\n    rtl: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"rtl\" }, bidiIsolate: Direction.RTL }),\n    ltr: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"ltr\" }, bidiIsolate: Direction.LTR }),\n    auto: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"auto\" }, bidiIsolate: null })\n};\n\nexport { DocInput, HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bidiIsolates, bracketMatching, bracketMatchingHandle, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, sublanguageProp, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, toggleFold, unfoldAll, unfoldCode, unfoldEffect };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}